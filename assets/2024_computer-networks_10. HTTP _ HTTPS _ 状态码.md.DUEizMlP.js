import{_ as t,c as l,o as i,a4 as a}from"./chunks/framework.C5O6QHj3.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/computer-networks/10. HTTP _ HTTPS _ 状态码.md","filePath":"2024/computer-networks/10. HTTP _ HTTPS _ 状态码.md"}'),e={name:"2024/computer-networks/10. HTTP _ HTTPS _ 状态码.md"},o=a('<h2 id="http-question" tabindex="-1">HTTP Question？ <a class="header-anchor" href="#http-question" aria-label="Permalink to &quot;HTTP Question？&quot;">​</a></h2><h3 id="http-1-0-http-1-1-http-2-0-的主要区别" tabindex="-1">HTTP/1.0 HTTP/1.1 HTTP/2.0 的主要区别 <a class="header-anchor" href="#http-1-0-http-1-1-http-2-0-的主要区别" aria-label="Permalink to &quot;HTTP/1.0  HTTP/1.1  HTTP/2.0 的主要区别&quot;">​</a></h3><h4 id="http-1-0" tabindex="-1">HTTP/1.0 <a class="header-anchor" href="#http-1-0" aria-label="Permalink to &quot;HTTP/1.0&quot;">​</a></h4><p>每进行一次 HTTP 通信，都需要经历建立 TCP 连接、传输 HTTP 数据和断开 TCP 连接三个阶段</p><h4 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h4><p><strong>http/1.1中的一个tcp链接同时只能发起一个http请求！（前面请求延迟会导致后面请求阻塞，即队头阻塞）浏览器中对于同一个域名，默认允许同时建立 6 个 TCP 持久连接</strong></p><ol><li>HTTP/1.1 引入持久连接，默认开启，<code>Connection： keep-alive</code>。</li><li>为了解决<strong>队头阻塞问题</strong>，引入不成熟的管线化，将多个 HTTP 请求整批提交给服务器的技术，虽然可以整批发送请求，不过服务器依然需要根据请求顺序来回复浏览器的请求。</li></ol><hr><p><strong>HTTP/1.1的缺陷</strong></p><ol><li>TCP慢启动</li><li>同时开启多条TCP连接竞争带宽</li><li>HTTP/1.1队头阻塞问题（基于管道机制，同一个TCP连接，所有HTTP请求按照顺序进行，排队处理）</li></ol><h4 id="http-2-0" tabindex="-1">HTTP/2.0 <a class="header-anchor" href="#http-2-0" aria-label="Permalink to &quot;HTTP/2.0&quot;">​</a></h4><ol><li><strong>引入二进制分帧层，实现HTTP的多路复用</strong>: 当个TCP连接可以同时处理多个HTTP请求和响应。数据经过<strong>二进制分帧层</strong>处理之后，会被转换为一个个带有请求 流 ID 编号的帧。这些帧可以交织在一起，顺序也可以被打乱，相同ID的帧最后会重新组装成完整的请求和响应 <ol><li>流 Stream 是独立的，双向的数据传输通道，相当于是高速公路，每个流有唯一标志id，一个TCP连接中可以有多个流并行传输。</li><li>帧 Frame 是HTTP/2.0 数据传输的最基本单位，相当于是公路上跑的车辆，每个车辆（帧）都有明确的目的地（流）</li></ol></li><li><strong>可以设置请求优先级</strong></li><li><strong>头部压缩</strong></li><li><strong>服务器推送</strong></li></ol><h3 id="http-1-1-长连接-和-http-2-0-多路复用的区别" tabindex="-1">HTTP/1.1 长连接 和 HTTP/2.0 多路复用的区别 <a class="header-anchor" href="#http-1-1-长连接-和-http-2-0-多路复用的区别" aria-label="Permalink to &quot;HTTP/1.1 长连接 和 HTTP/2.0 多路复用的区别&quot;">​</a></h3><ol><li><p>HTTP /1.1 同一个时间一个TCP连接只能处理一个请求，采用一问一答的形式，上一个请求响应后才能处理下一个请求</p></li><li><p>HTTP /2.0 同域名下所有的通信都在单个TCP连接上完成。<strong>在 HTTP/2 中，多路复用通过使用一个单一的 TCP 连接，并将请求和响应分割成独立的帧来实现。每个帧都有一个流 ID，用于识别所属的请求和响应</strong>，这样，这些帧都可以同时在一个 TCP 连接上进行传输</p></li></ol><h3 id="http-2-0中流的是什么" tabindex="-1">HTTP/2.0中流的是什么？ <a class="header-anchor" href="#http-2-0中流的是什么" aria-label="Permalink to &quot;HTTP/2.0中流的是什么？&quot;">​</a></h3><p><strong>流（Stream）</strong>：<strong>流是独立的、双向的数据传输通道</strong>。即可以向两个方向发送或接收数据。每个流都有唯一的标识符，这样可以让同一个 TCP 连接中的多个流独立地进行数据传输。流之间是并行的，可以同时进行数据的发送和接收。</p><hr><p><strong>帧（Frame）</strong>：帧则是 HTTP/2 数据传输的最基本单位。无论是请求还是响应的 HTTP 报文，都会被分割为多个帧，并在一个流的上下文中进行发送。<strong>每个帧都包含一个帧头，其中帧头标明了该帧属于哪个流（通过流标识符）</strong>，以及其他一些控制信息。数据帧也包含一段数据。 总的来看，流就像是高速公路，帧则是在公路上跑的车辆，每个车辆（帧）都有明确的目的地（流）。因为这些车辆可以并行行驶，所以通信效率大大提高。每个流（公路）上运输的帧（车辆）可以被服务器端按照接收顺序重新组装成完整的 HTTP 请求或响应。这就是 HTTP/2 的多路复用特性。 <img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1712622880765-7460f537-ef83-4cbc-8c0c-e3788427b63c.png#averageHue=%23b8b7b5&amp;clientId=uf2532d88-fad2-4&amp;from=paste&amp;height=271&amp;id=ubf9b7387&amp;originHeight=542&amp;originWidth=1802&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=100559&amp;status=done&amp;style=none&amp;taskId=u4ff1e3b1-1059-4d82-8268-150b95748d7&amp;title=&amp;width=901" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1712622899979-4b2821b1-028c-406f-b37c-b43d2b63b3d4.png#averageHue=%23c4c3c2&amp;clientId=uf2532d88-fad2-4&amp;from=paste&amp;height=374&amp;id=uaf04ffc4&amp;originHeight=748&amp;originWidth=1796&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=151522&amp;status=done&amp;style=none&amp;taskId=uad928233-35b8-402c-ac20-fa14ab7d210&amp;title=&amp;width=898" alt="image.png"><strong>流跟流之间的顺序可以是错乱的，但是流里面的帧的顺序是不可以错乱的</strong><a href="https://zhuanlan.zhihu.com/p/380107192" target="_blank" rel="noreferrer">怎么理解 请求、连接、流、帧之间的关系</a> good <a href="https://halfrost.com/http2-http-frames/" target="_blank" rel="noreferrer">HTTP/2 中的 HTTP 帧和流的多路复用</a> best！</p><h3 id="http-和-https-主要区别" tabindex="-1">HTTP 和 HTTPS 主要区别 <a class="header-anchor" href="#http-和-https-主要区别" aria-label="Permalink to &quot;HTTP 和 HTTPS 主要区别&quot;">​</a></h3><ol><li>HTTP 是明文传输，不安全的，HTTPS 是加密传输，更加安全。</li><li>HTTP 默认端口 80， HTTPS 默认端口 443，HTTPS 浏览器上会显示安全锁。</li><li>HTTP 不用认证证书 ，HTTPS 需要认证证书</li><li>HTTP 是连接简单，无状态的，HTTPS = HTTP + SSL/ TLS</li></ol><hr><ol><li>协议安全性：<strong>HTTP <strong>是超文本传输协议（Hypertext Transfer Protocol），信息是</strong>明文传输</strong>，它本身不具备任何安全性。<strong>HTTPS 则是具有安全性的 SSL 加密传输协议</strong>，可以防止数据在传输过程中被窃取或篡改，保证了数据的完整性和隐私性。</li><li>传输端口：HTTP 的默认端口号是80，HTTPS 的默认端口号是443。</li><li>URL显示：HTTPS 在浏览器的地址栏会显示一个带锁的小图标，也会在 URL 开头显示 https:// ，表示当前连接已经是加密连接。</li><li>证书认证：<strong>HTTP 不需要 CA（数字证书认证机构）的数字证书</strong>。HTTPS 需要⽤用 CA 证书来进行身份验证。只有当证书中信息和访客所看到网址的信息一致，用户的浏览器才会接受证书。如果证书不被信任，浏览器会给出警告，用户可以选择是否继续。</li><li>性能开销：由于 HTTPS 需要进行数据加密处理，因此它的网络性能会略低于 HTTP。</li></ol><p>总的来说，HTTPS 确实对服务器的资源消耗稍大一些，但它的信息安全性大大超过了 HTTP，尤其对于处理敏感信息（如信用卡信息，个人身份信息等）的网站，HTTPS 的使用是必不可少的。</p><h2 id="http常见状态码" tabindex="-1">HTTP常见状态码 <a class="header-anchor" href="#http常见状态码" aria-label="Permalink to &quot;HTTP常见状态码&quot;">​</a></h2><ul><li><code>101 Switching Protocols </code>： <ul><li>在HTTP升级为WebSocket的时候，如果服务器同意变更，就会发送状态码 101</li></ul></li><li><code>103 Early Hints</code>: <ul><li>此状态代码主要用于与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link" target="_blank" rel="noreferrer">Link</a> 链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload" target="_blank" rel="noreferrer">preloading</a> 资源</li></ul></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">link rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /&gt;</span></span></code></pre></div><ul><li><code>301 </code>：永久重定向。场景是使用域名跳转，新的URL在响应中给出</li><li><code>302</code>: <ul><li>HTTP/1.0 中的状态码,临时重定向。表示请求的资源临时移动到了由Location头部指定的URL上。</li><li>场景是未登陆的用户跳转登录；即使原始请求是 POST，浏览器也会默认使用get方式重新发出请求，会导致第一次以post请求的参数丢失；（才衍生出了307状态码）</li></ul></li><li><code>303 see other</code>: <ul><li>强制浏览器将请求方法从POST改到GET；</li><li>表示服务器已处理完客户端的请求，但客户端应该采用 GET 方法去获取另一个由 Location 响应头部字段指定的 URL。常用于 POST、PUT 请求后将用户重定向到一个新的页面，常见的例子如提交表单后重定向到一个确认页或状态条等。</li></ul></li><li><code>304 Not Modified</code>: 资源未修改，可使用缓存（协商缓存）</li><li><code>307 Temporary Redirect</code>: <ul><li>307 和 302 一样是临时重定向，唯一的区别在于，<strong>307 状态码不允许浏览器将原本为 POST 的请求重定向到 GET 请求上</strong>。</li><li>但用户代理 <em>不能</em> 更改所使用的 HTTP 方法：如果在第一个请求中使用了 POST，则在第二个请求中必须使用 POST</li></ul></li><li><code>308 Permanent Redirect</code>: <ul><li>308 和 301 一样是永久重定向，唯一的区别在于，<strong>308 状态码不允许浏览器将原本为 POST 的请求重定向到 GET 请求上</strong>。</li></ul></li><li><code>400 Bad Request</code><ul><li>客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求</li></ul></li><li><code>401 Unauthorized</code><ul><li>未授权，要求客户端进行身份验证才能获得请求的响应</li></ul></li><li><code>403 Forbidden</code><ul><li>客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 401 Unauthorized 不同，服务器知道客户端的身份</li></ul></li><li><code>404 Not Found</code><ul><li>服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。</li></ul></li><li><code>405 Method Not Allowed</code><ul><li>请求方法不允许</li></ul></li><li><code>500 Internal Server Error</code><ul><li>服务器错误</li></ul></li><li><code>503 Service Unavailable</code><ul><li>服务不可用</li><li>服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。</li></ul></li></ul><h2 id="详细说说103状态码" tabindex="-1">详细说说103状态码 <a class="header-anchor" href="#详细说说103状态码" aria-label="Permalink to &quot;详细说说103状态码&quot;">​</a></h2><ul><li>正常情况下，我们需要等待 HTML 页面的返回后，才可以知道下一步需要去加载哪些 JS、CSS文件，这中间有一段的等待时间就被浪费掉了；这尤其在SSR项目中尤为明显；</li><li>HTTP 103 状态码可以返回一个初步的 HTTP 响应，浏览器可以使用这些提示来预连接，并在等待资源响应的同时请求子资源。</li><li>它在 SSR 项目里面会非常有用；在SPA项目里面，大部分的逻辑都在客户端，HTML 很小，这时候我们只需要用常规的preload、preconnect之类的手段就可以了；</li></ul><p>在发送103状态码的同时，服务器会在响应头部中包含一些有用的信息，例如预加载资源的 Link 头部。也就是说，即使完整的响应尚未准备就绪，客户端也可以开始预加载必要的资源，从而优化用户体验，减少加载时间。</p><h2 id="_103状态码-和-http2-服务端推送的" tabindex="-1">103状态码 和 HTTP2 服务端推送的 <a class="header-anchor" href="#_103状态码-和-http2-服务端推送的" aria-label="Permalink to &quot;103状态码 和 HTTP2 服务端推送的&quot;">​</a></h2><ol><li><strong>103 Early Hints 状态码：</strong></li></ol><ul><li>服务器在开始处理请求，但尚未准备好完整响应时发送。</li><li>可提前在响应头部发送有用的信息，比如预加载资源的链接。</li><li>客户端可开始预加载这些资源以优化性能，无需等待完整响应。</li></ul><hr><ol start="2"><li><strong>HTTP/2 服务器推送：</strong></li></ol><ul><li>功能是服务器主动将可能用到的资源推送给客户端。</li><li>客户端在渲染页面时无需再向服务器请求这些资源，降低加载延迟。</li><li>如果推送的资源在客户端已有缓存，可能浪费资源。</li></ul><hr><ol start="3"><li><strong>区别：</strong></li></ol><ul><li><strong>103 状态码是建议客户端预加载资源，客户端可以选择是否预加载。</strong></li><li><strong>服务器推送则是直接将资源发送给客户端，但有可能导致资源浪费。</strong></li></ul><h2 id="tcp-和-udp-的区别" tabindex="-1">TCP 和 UDP 的区别 <a class="header-anchor" href="#tcp-和-udp-的区别" aria-label="Permalink to &quot;TCP 和 UDP 的区别&quot;">​</a></h2><ol><li>TCP 是面向连接的，UDP 是无连接的即发送数据前不需要先建立链接</li><li>TCP 是可靠传输，保证数据正确且有序；UDP是不可靠的，可能丢包或乱序</li><li>TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低</li><li>TCP 首部开销大，最小20字节最大60字节，而 UDP 首部开销小，仅8字节</li><li>TCP 只能是 1 对 1 的，UDP 支持 1 对 1,1 对多；</li></ol><h2 id="tcp如何保证数据的可靠性" tabindex="-1">TCP如何保证数据的可靠性 <a class="header-anchor" href="#tcp如何保证数据的可靠性" aria-label="Permalink to &quot;TCP如何保证数据的可靠性&quot;">​</a></h2><p>TCP (Transmission Control Protocol) 是一种面向连接的、可靠的、基于字节流的传输层通信协议。它通过以下几种机制来确保数据的可靠性：</p><ul><li><strong>确认应答（Acknowledgement）</strong>：TCP 提供了确认应答机制。每当发送出去一个数据包，发送者都会等待接收者的确认（ACK）。如果在指定的时间内未收到确认，发送者会假设该数据包已丢失，并会进行重传。</li><li><strong>序列号（Sequencing）</strong>：TCP 在发送数据包时，会对每一个数据包分配一个序列号。接收者在收到数据包后，会根据这个序列号对数据包进行排序。这样即使网络情况导致数据包到达的顺序与发送顺序不一致，也能够确保数据包在接收端被正确顺序地处理。</li><li><strong>差错检测</strong>：TCP 段的头部包含校验和。这使得接收端可以检查数据的一致性。如果发现数据传输中出现差错（比如由于网络噪声导致的数据更改），那么接收端将抛弃这个数据包，并请求重传。</li><li><strong>流量控制</strong>：流量控制是通过滑动窗口机制实现的。滑动窗口的大小可变，通常与接收方的缓冲区大小以及网络拥塞情况有关。这样可以防止发送者发送速率过快导致接收者无法接收，造成数据丢失。</li><li><strong>拥塞控制</strong>：为防止过多的数据注入到网络中，从而引起网络的性能降低，TCP 还必须提供拥塞控制机制。</li></ul>',44),r=[o];function s(n,T,h,p,d,P){return i(),l("div",null,r)}const u=t(e,[["render",s]]);export{g as __pageData,u as default};
