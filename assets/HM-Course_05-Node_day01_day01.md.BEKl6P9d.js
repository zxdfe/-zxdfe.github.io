import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.C5O6QHj3.js";const n="/assets/Untitled.01aeEm0k.png",t="/assets/Untitled-1.CDEtWbA_.png",e="/assets/Untitled-2.Cd44Q48d.png",h="/assets/Untitled-3.BipOjZK3.png",p="/assets/Untitled-4.f92Nfrht.png",k="/assets/Untitled-5.DStfbLap.png",o="/assets/Untitled-6.DzodbgAW.png",r="/assets/Untitled-7.C5j_PsR9.png",d="/assets/Untitled-8.CNNNVmSi.png",E="/assets/Untitled-9.DtBxJqlq.png",g="/assets/Untitled-10.HLDCfk4Z.png",D=JSON.parse('{"title":"day01","description":"","frontmatter":{},"headers":[],"relativePath":"HM-Course/05-Node/day01/day01.md","filePath":"HM-Course/05-Node/day01/day01.md"}'),c={name:"HM-Course/05-Node/day01/day01.md"},y=l('<h1 id="day01" tabindex="-1">day01 <a class="header-anchor" href="#day01" aria-label="Permalink to &quot;day01&quot;">​</a></h1><p>目标**😗*</p><ol><li><code>nodejs</code>:核心模块</li><li><code>npm</code> (包管理工具) + <code>es6</code>模块化</li><li><code>yarn</code> + <code>webpack</code></li></ol><h2 id="node-js是什么" tabindex="-1">Node.js是什么？ <a class="header-anchor" href="#node-js是什么" aria-label="Permalink to &quot;Node.js是什么？&quot;">​</a></h2><blockquote><p>Node.js is an open-source, cross-platform JavaScript runtime environment.</p></blockquote><ul><li><p>定义</p><p><strong>Node.js®是一个开源、跨平台的JavaScript运行时环境。</strong></p><p>⇒ Node.js 是一个基于 <code>Chrome V8 引擎</code>的<strong>JavaScript运行时环境</strong>。</p></li></ul><p><img src="'+n+'" alt="Untitled"></p><p><img src="'+t+'" alt="Untitled"></p><p><img src="'+e+'" alt="Untitled"></p><ul><li><strong>Node.js 能做什么？</strong><ol><li>后端Web服务器开发/写接口</li><li>写爬虫</li><li>写应用程序</li><li>脚手架命令行工具</li></ol></li></ul><h3 id="node-js-发展历史" tabindex="-1">Node.js 发展历史 <a class="header-anchor" href="#node-js-发展历史" aria-label="Permalink to &quot;Node.js 发展历史&quot;">​</a></h3><p>2008年 V8 引擎 随着 Chrome浏览器问世</p><p><code>Node.js发布于2009年5月</code>，由Ryan Dahl开发，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I/O模型， 让JavaScript 运行在服务端的开发平台，它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。</p><p><strong>如果只有ECMAScript？</strong></p><ol><li>不能操作DOM， 不能监听click事件，不能发送ajax请求（浏览器提供的）</li><li>不能处理HTTP请求，不能操作文件</li></ol><h2 id="node-js能干啥" tabindex="-1"><strong><strong>Node.js能干啥？</strong></strong> <a class="header-anchor" href="#node-js能干啥" aria-label="Permalink to &quot;****Node.js能干啥？****&quot;">​</a></h2><p><code>Node.js</code> 作为一个 <code>JavaScript</code> 的运行环境，仅仅提供了基础的功能和 <code>API</code>。然而，基于 <code>Node.js</code> 提供的这些基础功能，很多强大 的工具和框架如雨后春笋，层出不穷，所以学会了 <code>Node.js</code> ，可以让<strong>前端程序员胜任更多的工作和岗位</strong>！</p><ul><li>基于 <strong>Express/Koa</strong> 框架(<a href="http://www.expressjs.com.cn/" target="_blank" rel="noreferrer">http://www.expressjs.com.cn/</a>)，可以快速构建 Web 应用--&gt;<code>java</code></li><li>基于 <strong>Electron</strong> 框架(<a href="https://electronjs.org/" target="_blank" rel="noreferrer">https://electronjs.org/</a>)，可以构建<strong>跨平台</strong>的桌面应用--&gt;<code>安装,才可以使用的,开发一次,多平台运行</code></li><li>基于 <strong>Crawler</strong> 框架(<a href="https://www.npmjs.com/package/crawler" target="_blank" rel="noreferrer">https://www.npmjs.com/package/crawler</a>)，可以快速开发<strong>爬虫应用</strong>-&gt;<code>很</code></li><li>读写和操作<strong>数据库</strong>、创建实用的命令行工具<strong>辅助前端开发</strong>（后续框架中会一直使用的）</li><li><code>etc</code>...</li></ul><p>总之，<code>Node.js</code> 是大前端时代的“大宝剑”，有了 <code>Node.js</code> 这个超级 <code>buff</code> 的加持，前端程序员的行业竞争力会越来越强！</p><h3 id="node-js下载安装" tabindex="-1">Node.js下载安装 <a class="header-anchor" href="#node-js下载安装" aria-label="Permalink to &quot;Node.js下载安装&quot;">​</a></h3><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node官网</a> ⇒ 推荐 LTS （Long Term Support）</p></blockquote><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noreferrer">Node.js</a></p><blockquote><p>01 首页</p></blockquote><p><img src="'+h+'" alt="Untitled"></p><blockquote><p>02 下载</p></blockquote><p><img src="'+p+`" alt="Untitled"></p><blockquote><p><strong>安装</strong></p></blockquote><ul><li>安装就一直下一步就行了哈， 不要在中文文件夹目录下安装，默认选项不用修改，一直next</li></ul><ol><li>安装的过程全程<code>下一步</code><ol><li>不要改任何设置</li></ol></li><li><strong>注意！！！！！：</strong><ol><li>如非必要不要更改安装路径</li></ol></li></ol><p><strong>查看是否安装好</strong></p><blockquote><p>windows ⇒ 按 <code>win + R</code> , 输入<code>cmd</code> ，打开终端 terminal 窗口, 执行下列命令</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示版本号，就说明安装好了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果看不到：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">关闭所有打开的终端，重新打开</span></span></code></pre></div><h3 id="常见的终端窗口" tabindex="-1">常见的终端窗口 <a class="header-anchor" href="#常见的终端窗口" aria-label="Permalink to &quot;常见的终端窗口&quot;">​</a></h3><ul><li><strong>Windows</strong><ul><li>自带 <strong>cmd</strong> （在文件夹路径位置，输入cmd，回车）</li><li>自带 <strong>powershell</strong> （在文件夹路径位置，输入powershell ，回车）</li><li>商店下载 Windows Terminal</li><li>安装git之后，点 git bash here</li></ul></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre></div><h3 id="如何使用node-js-运行-javascript-代码" tabindex="-1">如何使用Node.js 运行 Javascript 代码 <a class="header-anchor" href="#如何使用node-js-运行-javascript-代码" aria-label="Permalink to &quot;如何使用Node.js 运行 Javascript 代码&quot;">​</a></h3><p>新建一个文件 报错 touch “文件名”</p><p><img src="`+k+'" alt="Untitled"></p><p>windows不支持touch命令</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install touch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g  全局安装后可以使用</span></span></code></pre></div><p><strong>方法一，终端里写代码</strong> （了解）</p><blockquote><p>cmd中输入node</p></blockquote><p><img src="'+o+`" alt="Untitled"></p><ol><li><p>打开终端窗口:</p></li><li><p>输入<code>node</code>回车</p></li><li><p>输入语法正确的<code>JS</code>代码,比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>console.log(&#39;感觉自己萌萌哒!&#39;)</span></span></code></pre></div></li><li><p>点击回车</p></li><li><p><code>ctrl+c</code>退出窗口</p></li><li><p><strong>思考：</strong></p><ol><li>如果代码很复杂用这种方式你是否快乐？</li></ol></li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wakaka&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 退出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按住Ctrl + 按两次C</span></span></code></pre></div><p><strong>方法二，使用node执行js文件（掌握）</strong></p><ol><li><strong>编写语法正确的<code>.js</code>文件</strong><ol><li>除了<code>Bom</code>和<code>Dom</code>，基本都可以写</li><li><code>console.log</code>,<code>setTimeout</code>这些也提供了</li><li>**注意！！！！：**是<code>.js</code>文件</li></ol></li><li>在<code>.js</code>文件所在文件夹打开任意终端 <ol><li><code>vscode 自带终端</code></li><li><code>cmd</code></li><li><code>power shell</code></li><li><code>git bash</code></li><li>....</li></ol></li><li>输入命令<code>node xx.js</code><ol><li><code>xx.js</code>是需要执行的文件名</li><li>中间有<strong>空格</strong></li></ol></li></ol><h3 id="补充-指定文件夹打开终端的方法" tabindex="-1"><strong>补充：指定文件夹打开终端的方法：</strong> <a class="header-anchor" href="#补充-指定文件夹打开终端的方法" aria-label="Permalink to &quot;**补充：指定文件夹打开终端的方法：**&quot;">​</a></h3><ol><li><code>cmd</code>: <ol><li>文件夹路径处输入<code>cmd</code>，回车</li></ol></li><li><code>powershell</code><ol><li>在文件夹路径处输入<code>powershell</code>,回车</li></ol></li><li><code>git bash</code><ol><li>文件夹中直接鼠标右键<code>git bash here</code>即可</li></ol></li><li><code>vscode</code><ol><li>在左侧资源管理中选中文件并右键</li><li>选择:<code>在集成终端中打开</code></li><li>**ctrl+\`**可以快速切换终端的开关</li><li><strong>注意：</strong><ol><li>初期<strong>不建议开多个</strong></li></ol></li></ol></li></ol><h3 id="补充-终端使用技巧" tabindex="-1"><strong>补充-终端使用技巧</strong> <a class="header-anchor" href="#补充-终端使用技巧" aria-label="Permalink to &quot;**补充-终端使用技巧**&quot;">​</a></h3><ol><li>方向键<code>↑</code>,<code>↓</code>可以切换历史命令</li><li>按<code>tab</code>可以自动补全</li><li><code>cls</code>或者<code>clear</code>可以清屏</li><li><code>cd ../</code>,<code>cd 文件夹名</code>... 路径切换</li><li>....</li></ol><h3 id="q小结" tabindex="-1">Q小结 <a class="header-anchor" href="#q小结" aria-label="Permalink to &quot;Q小结&quot;">​</a></h3><blockquote><p>刚才演示了如何使用<code>Node.js</code>:</p></blockquote><ul><li>演示的两种方法中建议使用哪一种? <ol><li><code>node xxx.js</code></li></ol></li><li>电脑上有那么多的终端工具，建议用哪一种？ <ol><li>随便, 选一个自己喜欢的</li><li>=⇒ mac 推荐 iterm2 =⇒ oh my zsh</li></ol></li></ul><h2 id="global模块" tabindex="-1"><strong><strong>global模块</strong></strong> <a class="header-anchor" href="#global模块" aria-label="Permalink to &quot;****global模块****&quot;">​</a></h2><p>类似于<code>window</code>对象,node中也有全局模块,在使用时不需要引入，直接使用</p><ol><li><a href="https://nodejs.org/api/modules.html#__dirname" target="_blank" rel="noreferrer">传送门:__dirname</a></li><li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/modules.html#__filename" target="_blank" rel="noreferrer">传送门:__filename</a></li><li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/console.html" target="_blank" rel="noreferrer">传送门:console</a></li><li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/globals.html#setintervalcallback-delay-args" target="_blank" rel="noreferrer">传送门:setTimeout</a></li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * window 浏览器中的全局对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * global nodejs中的全局对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * 注意 : node里面使用 global里面的变量,不需要引入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //1. console.log()  打印</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //2. setTimeout 和setInterval ，延时器和定时器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 模块作用域下的属性 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //3. __dirname  当前文件夹的绝对路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //4. __filename 当前文件的完整路径, 包含当前文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //从当前所在磁盘盘符一直到当前文件夹的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span></code></pre></div><h2 id="fs模块" tabindex="-1"><strong><strong>FS模块</strong></strong> <a class="header-anchor" href="#fs模块" aria-label="Permalink to &quot;****FS模块****&quot;">​</a></h2><p><code>fs</code>模块是<code>nodejs</code>中最常用的一个模块，fs模块的方法非常多,今天咱们了解2个即可</p><p>文档地址：<a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noreferrer">http://nodejs.cn/api/fs.html</a></p><p><strong>注意：</strong></p><ol><li>除了global模块中的内容可以直接使用，其他模块都是需要加载的。</li><li>fs模块不是全局的，不能直接使用。因此需要导入才能使用。</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类似于浏览器中 script src=&quot;xx&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="读取文件" tabindex="-1"><strong>读取文件</strong> <a class="header-anchor" href="#读取文件" aria-label="Permalink to &quot;**读取文件**&quot;">​</a></h3><blockquote><p>首先是读取文件的方法</p><p><a href="https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fsreadfilesyncpath-options" target="_blank" rel="noreferrer">传送门:readFileSync</a></p></blockquote><p>⇒ 中文</p><p><a href="https://www.nodeapp.cn/fs.html#fs_fs_readfilesync_path_options" target="_blank" rel="noreferrer">文件系统 | Node.js 中文文档 | Node.js 中文网</a></p><p><code>fs</code>模块提供的读取文件的方法有很多种,咱们来学习这种同步的读取写法</p><p>⇒ 同步读取文件</p><p><strong>写法1:</strong> 不考虑异常</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法1 不给编码格式 返回buffer对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const res = fs.readFileSync(&#39;./info/a.txt&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;res:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法2 给编码格式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./info/a.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;res2:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res2)</span></span></code></pre></div><p>**写法2:**可以通过<code>try-catch</code>捕获</p><p>⇒ Buffer 缓冲对象</p><p>JavaScript 语言没有读取或操作二进制数据流的机制。 Buffer 类被引入作为 Node.js API 的一部分，使其可以在 TCP 流或文件系统操作等场景中处理二进制数据流。</p><p><a href="https://www.runoob.com/nodejs/nodejs-buffer.html" target="_blank" rel="noreferrer">https://www.runoob.com/nodejs/nodejs-buffer.htm</a>l</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer对象是Nodejs用于处理二进制数据的。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 其实任意的数据在计算机底层都是二进制数据，因为计算机只认识二进制。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 所以读取任意的文件，返回的结果都是二进制数据，即Buffer对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer对象可以调用toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()方法转换成字符串。</span></span></code></pre></div><h3 id="q-小结" tabindex="-1">Q:小结 <a class="header-anchor" href="#q-小结" aria-label="Permalink to &quot;Q:小结&quot;">​</a></h3><ul><li><code>readFileSync</code>是哪个模块点出来的? <ol><li><code>fs</code></li></ol></li><li>不设置编码格式返回的是什么? <ol><li><strong>用进制的方式表示的Buffer数据</strong></li></ol></li></ul><h3 id="写文件" tabindex="-1">写文件 <a class="header-anchor" href="#写文件" aria-label="Permalink to &quot;写文件&quot;">​</a></h3><p>接下来咱们来学习如何写文件</p><p><a href="https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fswritefilesyncfile-data-options" target="_blank" rel="noreferrer">传送门:writeFileSync</a></p><p><a href="https://www.nodeapp.cn/fs.html#fs_fs_writefilesync_file_data_options" target="_blank" rel="noreferrer">文件系统 | Node.js 中文文档 | Node.js 中文网</a></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 参数1 路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 参数2 内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以使用try-catch捕获异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./info/a.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 基本使用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 文件不存在</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 文件夹和文件均不存在</span></span></code></pre></div><h3 id="q小结-1" tabindex="-1">Q小结 <a class="header-anchor" href="#q小结-1" aria-label="Permalink to &quot;Q小结&quot;">​</a></h3><p>刚才咱们演示了如何写文件:</p><ul><li><code>writeFileSync</code>是哪个模块点出来的? <ol><li><code>fs</code></li></ol></li><li>文件不存在是否会报错? <ol><li>不会--&gt;创建</li></ol></li><li>文件夹不存在是否会报错? <ol><li>报错--&gt;找不到</li></ol></li></ul><h3 id="练习-成绩统计" tabindex="-1">练习 <strong><strong>- 成绩统计</strong></strong> <a class="header-anchor" href="#练习-成绩统计" aria-label="Permalink to &quot;练习 ****- 成绩统计****&quot;">​</a></h3><blockquote><p>结合刚刚学习的内容,咱们来完成一个成绩统计的案例</p></blockquote><p><strong>需求</strong></p><ol><li>读取<code>成绩.txt</code>中的成绩并进行累加</li><li>将累加的结果保存到,<code>总成绩.txt</code>中</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">小明</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">98</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,小红</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">68</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,小黑</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">88</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,小绿</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">77</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,小王</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">59</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,小白</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span></code></pre></div><h3 id="步骤" tabindex="-1"><strong>步骤:</strong> <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;**步骤:**&quot;">​</a></h3><ol><li>读取数据 <ol><li><code>fs.readFileSync</code></li></ol></li><li>转换数据格式 <ol><li>,---&gt;分隔 <code>split</code>--字符串--&gt;数组</li><li><code>=</code>-&gt;<code>split</code>获取到数值</li></ol></li><li>累加并保存 <ol><li>累加</li><li><code>fs.writeFileSync</code></li></ol></li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 读取数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./score/成绩.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(&#39;scope:&#39;, scope)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2.转换数据格式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据,切换为 数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基于数组 获取每一项中的数字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // console.log(v.split(&#39;=&#39;))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 切割之后索引为1的值 str</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +str--&gt;数字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;=&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(&#39;numArr:&#39;, numArr)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3.累加+保存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> total</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pre </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(&#39;total:&#39;, total)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不允许直接写入数字 转为 字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数字+&#39;&#39;--&gt;string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./score/总成绩.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h3><ol><li><code>Node.js</code><ol><li><code>JavaScript</code>的运行时环境</li><li>它也可以解析<code>js</code>代码</li></ol></li><li>如何用<code>Node.js</code>解析<code>js</code><ol><li><code>node 文件名.js</code></li></ol></li><li><code>fs</code>文件模块 <ol><li><code>const fs = require(&#39;fs&#39;)</code></li><li>读取:<code>fs.readFileSync</code></li><li>写入:<code>fs.writeFileSync</code></li><li>成绩统计的案例</li></ol></li><li><code>reduce</code></li></ol><h2 id="路径动态拼接的问题" tabindex="-1"><strong><strong>路径动态拼接的问题</strong></strong> <a class="header-anchor" href="#路径动态拼接的问题" aria-label="Permalink to &quot;****路径动态拼接的问题****&quot;">​</a></h2><blockquote><p>目前为止咱们终端所处路径和<code>.js</code>所在的路径相同,如果不相同呢?</p></blockquote><p>⇒ 代码在运行的时候，会以执行<code>node</code> 命令时所处的目录(<strong>小黑窗</strong>)，**动态拼接出（加上文件内部写的路径）**被操作文件的完整路径。</p><h3 id="复现问题步骤" tabindex="-1"><strong>复现问题步骤:</strong> <a class="header-anchor" href="#复现问题步骤" aria-label="Permalink to &quot;**复现问题步骤:**&quot;">​</a></h3><ol><li><p><code>node</code>切换到和<code>.js</code>不同级的目录</p></li><li><p>运用相对路径执行<code>.js</code>文件</p><p><img src="`+r+'" alt="Untitled"></p></li><li><p>测试<strong>基本逻辑</strong>的<code>js</code></p></li><li><p>测试上一节<code>demo</code>中的<code>.js</code></p></li><li><p>测试使用<strong>绝对路径</strong></p></li></ol><h3 id="路径动态拼接的问题-1" tabindex="-1"><strong>路径动态拼接的问题</strong> <a class="header-anchor" href="#路径动态拼接的问题-1" aria-label="Permalink to &quot;**路径动态拼接的问题**&quot;">​</a></h3><p>这一节咱们演示了<strong>路径动态</strong>拼接的问题:</p><ol><li>执行<code>node</code>命令时,代码中的相对路径会和<strong>哪个路径</strong>动态拼接? <ol><li>会和<strong>终端中的路径动态</strong>的拼接</li><li>不是和<code>执行的js</code>动态拼接</li></ol></li><li>相对路径不靠谱,如何解决? <ol><li><strong>绝对路径</strong></li></ol></li></ol><h2 id="path模块" tabindex="-1"><strong>path模块</strong> <a class="header-anchor" href="#path模块" aria-label="Permalink to &quot;**path模块**&quot;">​</a></h2><blockquote><p>Node.js提供的处理路径的模块path,提供了很多处理路径的方法和属性,他也是一个内置模块</p><p><a href="https://nodejs.org/dist/latest-v16.x/docs/api/path.html" target="_blank" rel="noreferrer">传送门:path模块</a></p></blockquote><p>类似于<code>FS</code>模块,使用时需要先导入</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>方法很多,咱们了解其中的1个即可</p><ol><li><code>join</code></li></ol><h3 id="拼接-join" tabindex="-1"><strong>拼接-join</strong> <a class="header-anchor" href="#拼接-join" aria-label="Permalink to &quot;**拼接-join**&quot;">​</a></h3><blockquote><p>首先是join方法,他可以把多个路径片段拼接为完整的路径字符串,并且格式会和当前所在的操作系统一致</p><p><a href="https://www.nodeapp.cn/path.html#path_path_join_paths" target="_blank" rel="noreferrer">传送门</a></p></blockquote><h3 id="语法" tabindex="-1"><strong>语法</strong> <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;**语法**&quot;">​</a></h3><ol><li>基于文档确认语法</li></ol><h3 id="测试步骤" tabindex="-1"><strong>测试步骤</strong> <a class="header-anchor" href="#测试步骤" aria-label="Permalink to &quot;**测试步骤**&quot;">​</a></h3><ol><li>基于文档确认语法并进行<strong>测试</strong></li><li>测试通过之后: <ol><li>使用<strong>绝对路径</strong>来<strong>读取</strong>文件</li></ol></li></ol><h3 id="拼接-join方法" tabindex="-1"><strong>拼接-join方法</strong> <a class="header-anchor" href="#拼接-join方法" aria-label="Permalink to &quot;**拼接-join方法**&quot;">​</a></h3><p>这一节咱们演示了如何通过<code>join</code>方法拼接路径:</p><ol><li>利用<code>join</code>方法拼接路径和直接自己拼接的区别是? <ol><li>join更简单</li><li>根据具体的设备,生成不同的路径---&gt;<strong>灵活</strong></li></ol></li><li>不同操作系统拼接出来的路径是否相同? <ol><li><code>\\</code>-<code>/</code></li></ol></li></ol><h2 id="http模块" tabindex="-1"><strong>http模块</strong> <a class="header-anchor" href="#http模块" aria-label="Permalink to &quot;**http模块**&quot;">​</a></h2><blockquote><p>今天的最后我们来学习http模块,并且结合他来开发一个静态资源服务器</p></blockquote><blockquote><p>为了更好的理解后续的代码,咱们来学习一些预备的知识</p></blockquote><h3 id="前置知识" tabindex="-1"><strong>前置知识</strong> <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;**前置知识**&quot;">​</a></h3><p><strong>当我们在浏览器中输入了<a href="notion://www.notion.so/www.baidu.com" target="_blank" rel="noreferrer">www.baidu.com</a>的时候,发生了什么?</strong></p><ul><li>ip地址 域名 端口三者之间的关系? <ul><li><strong>ip地址:</strong><ul><li>任何一台设备(计算机, 手机, ...)想要接入到网络中(互联网,局域网)，就会被分配一个<strong>唯一的ip地址</strong></li><li>通过这个<code>ip</code>地址就能找到这台设备</li></ul></li><li><strong>域名:</strong><ul><li>比如 <a href="notion://www.notion.so/www.jd.com" target="_blank" rel="noreferrer">www.jd.com</a> 就是域名 ，方便记忆</li><li>我们购买了<strong>服务器</strong>之后, 服务器会有一个<strong>IP</strong>地址, 我们可以通过<strong>域名解析</strong>让域名指向当前IP</li><li>域名和ip地址绑定后，通过域名就可以找到对应的<strong>ip地址</strong>, 从而访问到该服务器</li></ul></li><li><strong>端口:</strong><ul><li>端口是计算机和外界通讯的<strong>虚拟通道</strong></li><li>一台计算机能运行很多程序, 一般一个程序会占用<strong>一个</strong>或者<strong>多个</strong>端口</li><li>http协议的默认端口是<strong>80</strong></li><li>https协议的默认端口是<strong>443</strong></li></ul></li></ul></li></ul><p><img src="'+d+`" alt="Untitled"></p><ol><li>根据相关域名, 去查询<code>dns</code>服务器,得到对应的ip地址</li><li>根据<code>IP</code>地址, 找到对应的计算机</li><li>根据<code>端口</code>找到对应的服务器程序</li><li>根据<code>url</code>请求具体的信息</li><li>服务器根据上述信息<strong>发送请求</strong></li><li>浏览器<strong>接收</strong>到了服务器的响应, 把结果响应出来</li></ol><h3 id="什么是http模块" tabindex="-1"><strong>什么是http模块</strong> <a class="header-anchor" href="#什么是http模块" aria-label="Permalink to &quot;**什么是http模块**&quot;">​</a></h3><blockquote><p>http也是内置模块, Node.js 官方提供的、用来创建web 服务器的模块。</p></blockquote><p>它提供了一系列的方法和属性,让开发者(咱们)可以用代码来创建<strong>服务器</strong>,接收<strong>请求</strong>及响应<strong>内容</strong>例如：</p><p>⚫ <code>http.createServer()</code> 方法，用来创建一个<code>web</code> 服务器，从而对外提供web 资源</p><p>如果要在 <code>Node.js</code>的代码中使用 <code>http</code> 模块，则需要先<strong>导入它</strong>：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="前置知识及http模块介绍" tabindex="-1"><strong>前置知识及http模块介绍</strong> <a class="header-anchor" href="#前置知识及http模块介绍" aria-label="Permalink to &quot;**前置知识及http模块介绍**&quot;">​</a></h3><p>这一节咱们介绍了请求web服务器的基本流程,及<code>Node</code>自带的<code>http</code>模块:</p><ul><li><code>url</code>地址经由什么解析为<code>ip</code>地址? <ol><li>DNS解析服务器</li></ol></li><li><code>http</code>协议的默认端口是? <ol><li>80</li></ol></li></ul><p><code>node</code>提供了<code>http</code>模块可以让开发者创建<code>web</code>服务器</p><h3 id="创建最基本的web服务器" tabindex="-1"><strong>创建最基本的web服务器</strong> <a class="header-anchor" href="#创建最基本的web服务器" aria-label="Permalink to &quot;**创建最基本的web服务器**&quot;">​</a></h3><blockquote><p>接下来咱们基于官方的示例代码创建基本的web服务器</p><p><a href="http://nodejs.cn/api-v16/http.html" target="_blank" rel="noreferrer">传送门:http模块</a></p><p><a href="http://nodejs.cn/learn#nodejs-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">传送门:Node.js应用程序示例</a></p></blockquote><h3 id="步骤-1" tabindex="-1"><strong>步骤</strong> <a class="header-anchor" href="#步骤-1" aria-label="Permalink to &quot;**步骤**&quot;">​</a></h3><ol><li>导入 <code>http</code> 模块</li><li>创建 <code>web</code> 服务器实例</li><li>启动服务器</li><li>为服务器实例绑定<code>request</code> 事件，监听客户端的请求</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 导入 http 模块 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 创建 web 服务器实例 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 启动服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`server is running.... at 3000\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 为服务器实例绑定 request 事件，监听客户端的请求 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当客户端发送请求到服务器的时候，会触发这个事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这里要处理客户端的请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello yohuohuohuo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="端口号" tabindex="-1"><strong>端口号</strong> <a class="header-anchor" href="#端口号" aria-label="Permalink to &quot;**端口号**&quot;">​</a></h3><p>计算机中的<strong>端口号</strong></p><ol><li>计算机和外部通讯的虚拟通道</li><li>范围是:<strong>0---65535</strong></li><li>一个端口一次<strong>只能被一个</strong>服务占用: <ol><li>比较靠前的端口很多已经被电脑默认的服务占用</li><li>一般给4位的没什么被占用</li></ol></li><li>通过端口号来区分计算机提供的不同服务</li></ol><p><img src="`+E+`" alt="Untitled"></p><h3 id="q-小结-1" tabindex="-1">Q 小结 <a class="header-anchor" href="#q-小结-1" aria-label="Permalink to &quot;Q 小结&quot;">​</a></h3><ul><li><code>request</code>事件什么时候触发? <ol><li>有人访问服务器会触发</li></ol></li><li>一个端口一次可以被几个服务使用? <ol><li>一个</li></ol></li><li>代码中的<code>3000</code>端口是否可以更换? <ol><li>可以,有效即可</li></ol></li></ul><h2 id="request对象和response对象" tabindex="-1"><strong>request对象和response对象</strong> <a class="header-anchor" href="#request对象和response对象" aria-label="Permalink to &quot;**request对象和response对象**&quot;">​</a></h2><blockquote><p>传送门:request</p><p><a href="http://nodejs.cn/api/http.html#http_class_http_serverresponse" target="_blank" rel="noreferrer">传送门:response</a></p></blockquote><h3 id="概念" tabindex="-1"><strong>概念:</strong> <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;**概念:**&quot;">​</a></h3><ol><li>为了让开发者更好的<strong>接收请求</strong>的信息,及<strong>设置返回</strong>的内容</li><li><code>request</code>事件中提供了<strong>2个</strong>参数,分别是 <ol><li><code>request</code></li><li><code>response</code></li></ol></li></ol><h3 id="request常见属性" tabindex="-1"><strong><strong>request常见属性：</strong></strong> <a class="header-anchor" href="#request常见属性" aria-label="Permalink to &quot;****request常见属性：****&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 所有的请求头信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method： </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">请求的方式</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url： </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">请求的地址</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="response常见属性和方法" tabindex="-1"><strong><strong>response常见属性和方法</strong></strong> <a class="header-anchor" href="#response常见属性和方法" aria-label="Permalink to &quot;****response常见属性和方法****&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data); 结束请求，并且响应一段内容，相当于res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.statusCode: 响应的的状态码 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 404</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, value); 设置响应头信息， 比如content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span></span></code></pre></div><h3 id="测试" tabindex="-1"><strong>测试:</strong> <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;**测试:**&quot;">​</a></h3><ol><li>输出<code>request</code>对象中的<code>method</code>和<code>url</code>属性</li><li>通过<code>statusCode</code>属性设置不同的状态码</li><li>通过<code>setHeader</code>设置响应头</li><li>通过<code>end</code>设置不同的内容</li><li><strong>注意:</strong><ol><li>代码更改之后需要<code>ctrl+c</code>关闭并重新运行</li><li><code>favicon.ico</code>的请求是浏览器自己发送的</li><li>返回的内容中如果有<strong>中文会乱码</strong></li></ol></li></ol><h3 id="解决中文乱码问题" tabindex="-1"><strong>解决中文乱码问题</strong> <a class="header-anchor" href="#解决中文乱码问题" aria-label="Permalink to &quot;**解决中文乱码问题**&quot;">​</a></h3><p>当调用 <code>res.end()</code> 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式,下面给出一些<code>content-type</code>的设置方法</p><p><strong>注意:</strong></p><ul><li>部分内容可以省略<code>content-type</code>设置,浏览器可以自行推断</li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain; charset=utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html; charset=utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>如何理解<code>request</code>和<code>response</code>对象? <ol><li><code>request</code>: <ol><li>请求,http模块,客户端请求的信息 保存到了 request中方便调用</li><li><code>url</code></li><li><code>method</code></li></ol></li><li><code>response</code><ol><li>响应,http模块为了让开发者,可以便捷的设置状态码,响应头,内容,提供了这么一个对象</li><li><code>statusCode</code>属性</li><li><code>setHeader(key,value)</code></li><li><code>response.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;)</code></li><li><code>end(&#39;内容&#39;)</code></li></ol></li></ol></li><li>回调函数中<code>request</code>和<code>response</code>的名字是否可以修改? <ol><li>可以---&gt;形参</li></ol></li></ul><h2 id="根据url响应不同的html内容" tabindex="-1"><strong>根据url响应不同的html内容</strong> <a class="header-anchor" href="#根据url响应不同的html内容" aria-label="Permalink to &quot;**根据url响应不同的html内容**&quot;">​</a></h2><blockquote><p>接下来咱们结合目前学习的知识来实现一个具体的效果</p></blockquote><h3 id="需求" tabindex="-1"><strong>需求:</strong> <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;**需求:**&quot;">​</a></h3><ol><li><code>url</code>为 <ol><li><code>/</code>或者<code>/index.html</code>--&gt;<code>&lt;h1&gt;首页&lt;/h1&gt;</code></li><li><code>/about.html</code>--&gt;<code>&lt;h1&gt;about页面&lt;/h1&gt;</code></li><li>其他----&gt;<code>&lt;h1&gt;404 not found&lt;/h1&gt;</code></li></ol></li></ol><h2 id="练习-时钟案例" tabindex="-1">练习-时钟案例 <a class="header-anchor" href="#练习-时钟案例" aria-label="Permalink to &quot;练习-时钟案例&quot;">​</a></h2><blockquote><p>接下来结合目前所学的知识来完成一个demo</p></blockquote><h3 id="需求-1" tabindex="-1"><strong>需求:</strong> <a class="header-anchor" href="#需求-1" aria-label="Permalink to &quot;**需求:**&quot;">​</a></h3><p>浏览器输入<strong>对应的url地址</strong>,<strong>读取并返回</strong>对应的文件</p><ol><li><code>/</code>或者<code>/index.html</code>--&gt;返回<code>/clock/index.html</code></li><li><code>/clock.css</code>--&gt;返回<code>/clock/clock.css</code></li><li><code>/clock.js</code>--&gt;返回<code>/clock/clock.js</code></li><li>其他----&gt;<code>&lt;h1&gt;404 not found&lt;/h1&gt;</code></li></ol><h3 id="分析" tabindex="-1"><strong>分析:</strong> <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;**分析:**&quot;">​</a></h3><ol><li><strong>绝对路径</strong>读取文件需要导入? <ol><li><code>path.join()</code></li><li><code>fs.readFileSync</code></li></ol></li><li><strong>返回</strong>读取的文件 <ol><li><code>end</code>方法响应内容</li></ol></li><li><strong>不需要</strong>设置<code>utf-8</code>的编码格式（读取文件不需要）</li><li><strong>不需要</strong>设置<code>content-type</code></li></ol><h1 id="实现静态web服务器" tabindex="-1"><strong>实现静态WEB服务器</strong> <a class="header-anchor" href="#实现静态web服务器" aria-label="Permalink to &quot;**实现静态WEB服务器**&quot;">​</a></h1><blockquote><p>基于上一节的代码,调整为静态web服务器</p><ul><li>运行之后</li><li>同一局域网中的用户输入 <ul><li><code>http://ip:端口/xxx.html</code></li><li><code>http://ip:端口/xxx.png</code></li></ul></li><li>即可访问服务器<code>www</code>目录中对应的文件</li></ul></blockquote><blockquote><p>首先完成响应首页的逻辑</p></blockquote><h3 id="需求-2" tabindex="-1"><strong>需求:</strong> <a class="header-anchor" href="#需求-2" aria-label="Permalink to &quot;**需求:**&quot;">​</a></h3><ol><li>浏览器中输入<code>/</code>或者<code>/index.html</code></li><li>读取并返回<code>www</code>目录中的<code>index.html</code></li></ol><h3 id="分析-1" tabindex="-1"><strong>分析:</strong> <a class="header-anchor" href="#分析-1" aria-label="Permalink to &quot;**分析:**&quot;">​</a></h3><ol><li><strong>准备工作</strong>: <ol><li>创建<code>www</code>目录并整合上一节的时钟界面</li></ol></li><li><strong>绝对路径</strong>读取文件,需要导入哪些模块? <ol><li>fs</li><li>path</li></ol></li><li><strong>返回读取的内容</strong><ol><li><code>end</code>方法响应内容</li></ol></li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 导入 http 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 创建 web 服务器实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 启动服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8848</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my server start work&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 为服务器实例绑定 request 事件，监听客户端的请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断地址 / 和 /index.html ---&gt;/index.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.url</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1./ /index.html 读取并返回 index.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/index.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 读取并返回</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 绝对路径 读取内容 响应给浏览器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fullPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./www&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullPath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>基于上一小节的逻辑,完成后续的代码</p></blockquote><h3 id="需求-3" tabindex="-1"><strong>需求:</strong> <a class="header-anchor" href="#需求-3" aria-label="Permalink to &quot;**需求:**&quot;">​</a></h3><ol><li>请求其他的资源,读取<code>www</code>目录中对应的文件并返回</li><li>读取失败响应<code>404</code>-&gt;<code>not found</code></li></ol><h3 id="步骤-2" tabindex="-1"><strong>步骤:</strong> <a class="header-anchor" href="#步骤-2" aria-label="Permalink to &quot;**步骤:**&quot;">​</a></h3><ol><li><strong>生成</strong>读取的<strong>文件路径</strong><ol><li>基于<code>url</code>属性,生成绝对路径</li></ol></li><li><strong>返回</strong>读取的内容 <ol><li><code>end</code>方法</li></ol></li></ol><h2 id="end" tabindex="-1">end~~~~~~~~~~~~ <a class="header-anchor" href="#end" aria-label="Permalink to &quot;end~~~~~~~~~~~~&quot;">​</a></h2><hr><p><a href="https://www.electronjs.org/zh/docs/latest" target="_blank" rel="noreferrer">简介 | Electron</a></p><ul><li><a href="https://github.com/remy/nodemon" target="_blank" rel="noreferrer">https://github.com/remy/nodemon</a></li><li><a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noreferrer">https://www.npmjs.com/package/nodemon</a></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [your </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app]</span></span></code></pre></div><p>node本地启动服务，同一个局域网下，要关闭电脑的防火墙才能访问。</p><p>自己手机开热点，ipconfig ； 关掉电脑防火墙； 可以访问</p><p><a href="https://blog.csdn.net/z17864151193/article/details/123897689" target="_blank" rel="noreferrer">vite启动后提示&quot;Network: use <code>--host</code> to expose&quot;，且无法通过网络IP访问服务_南桥几许的博客-CSDN博客_vite 局域网访问</a></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hostname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.socket.localAddress;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ip)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://\${hostname}:\${port}/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Server running at \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.method)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fullPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullPath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileHTML)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="nodemon的安装" tabindex="-1">nodemon的安装 <a class="header-anchor" href="#nodemon的安装" aria-label="Permalink to &quot;nodemon的安装&quot;">​</a></h3><p>当我们修改了后台node服务器的代码之后，都需要重启node服务器。我们可以<strong>使用nodemon来自动重启服务</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局安装nodemon</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or using yarn: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span></span></code></pre></div><h3 id="node-js-web框架" tabindex="-1">Node.js-Web框架 <a class="header-anchor" href="#node-js-web框架" aria-label="Permalink to &quot;Node.js-Web框架&quot;">​</a></h3><ol><li><a href="https://www.expressjs.com.cn/" target="_blank" rel="noreferrer">Express</a></li><li><a href="https://www.koajs.com.cn/" target="_blank" rel="noreferrer">koa</a></li></ol><p><img src="`+g+`" alt="Untitled"></p><h3 id="mock数据" tabindex="-1">Mock数据 <a class="header-anchor" href="#mock数据" aria-label="Permalink to &quot;Mock数据&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;itemId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;597569&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;老字号五谷芳乳鸽王（溪涌店）&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;imgUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://p1.meituan.net/w.h/deal/__9865128__6381104.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;consumeNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;areaName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;lowPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;79.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;saleNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;commentNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">990</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;detailUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;avgPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;itemId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;592274&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;大渔铁板烧（福民店）&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;imgUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://p0.meituan.net/w.h/deal/__16971854__3919079.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4.8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;consumeNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;areaName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;皇岗/水围&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;lowPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;175.8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;saleNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;commentNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3523</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;detailUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;avgPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">185</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;itemId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1441497&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;黄金海岸自助火锅（龙华店）&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;imgUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://p1.meituan.net/w.h/deal/b848f47a4623054c33c3d3aac5ebe3fb429108.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;consumeNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;areaName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;龙华&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;lowPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;49.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;saleNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;commentNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1840</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;detailUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;avgPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">39</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;itemId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;11000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;尊宝比萨（福强店）&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;imgUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://p0.meituan.net/w.h/mogu/3de8c301dc05d282670489ff477f34f0111729.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;consumeNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;areaName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;皇岗/水围&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;lowPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;56.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;saleNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;commentNum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4650</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;detailUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;avgPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,206),F=[y];function u(C,q,b,m,B,A){return a(),i("div",null,F)}const v=s(c,[["render",u]]);export{D as __pageData,v as default};
