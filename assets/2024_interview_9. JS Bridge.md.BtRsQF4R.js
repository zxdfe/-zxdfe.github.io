import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.C5O6QHj3.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/interview/9. JS Bridge.md","filePath":"2024/interview/9. JS Bridge.md"}'),e={name:"2024/interview/9. JS Bridge.md"},t=n(`<h2 id="webview是什么" tabindex="-1">WebView是什么 <a class="header-anchor" href="#webview是什么" aria-label="Permalink to &quot;WebView是什么&quot;">​</a></h2><p><strong>WebView 是一个用于在应用内部显示网页的视图组件，它允许我们在应用内部嵌入一个简单的浏览器，可以用来显示网页或者加载网络内容</strong>。这就意味着，你可以在你的应用中直接嵌入网页，让用户在不离开应用的情况下浏览网页内容</p><hr><p><strong>在Android 中，WebView 是 android.webkit.WebView 类的一个实例，你可以在布局文件或者代码中创建它，并使用 loadUrl() 方法来加载网页。</strong></p><p>你还可以通过各种配置和方法，来控制它的行为，比如启用/禁用 JavaScript、缩放页面、监听页面加载状态等。</p><hr><p><strong>在 iOS 中，WKWebView 是在 WebKit 框架下的一个用于显示网页的组件，与 Android 中的 WebView 类似。你可以将 WKWebView 嵌入到你的视图中，通过 load() 方法来加载网页</strong>。同时，WKWebView 还提供了一系列的 API，允许你控制它的行为，比如监听页面加载状态、处理网页出错、执行 JavaScript、与 JavaScript 进行交互等。 <strong>WKWebView 至少需要 iOS 8 和以上的系统才可以使用，早期是UIWebView（性能差）</strong></p><h2 id="js-bridge" tabindex="-1">JS Bridge <a class="header-anchor" href="#js-bridge" aria-label="Permalink to &quot;JS Bridge&quot;">​</a></h2><blockquote><p><strong>JS Bridge 主要用于JS和Native之间的双向通信，相当于是它们的一个桥梁。</strong></p></blockquote><p>通常情况下，JavaScript 是无法直接访问和控制设备原生的 API 的，JSBridge 简单来讲，主要是 给 JavaScript 提供调用 Native 功能的接口，让混合开发中的『前端部分』可以方便地使用地址位置、摄像头甚至支付等 Native 功能。同时，由名字 bridge，桥的意思来看，Native通用可以通过JS Bridge 调用JS</p><h3 id="native-js" tabindex="-1">Native =&gt; JS <a class="header-anchor" href="#native-js" aria-label="Permalink to &quot;Native =&gt; JS&quot;">​</a></h3><p>Native 调用 JavaScript 较为简单，毕竟不管是 iOS 的 WKWebView，还是 Android 的 WebView 组件，都以子组件的形式存在于 View/Activity 中，直接调用相应的 API 即可。</p><h4 id="通过-webview-的-loadurl-、evaluatejavascript" tabindex="-1">通过 WebView 的 <code>loadUrl()</code>、<code>evaluateJavaScript()</code> <a class="header-anchor" href="#通过-webview-的-loadurl-、evaluatejavascript" aria-label="Permalink to &quot;通过 WebView 的 \`loadUrl()\`、\`evaluateJavaScript()\`&quot;">​</a></h4><p>等方法调用 JavaScript 函数：这种方式通常用于 Android 向 Web 发送信息或者执行某个 JavaScript 函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Android 4.4之前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaScriptString);</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// android 4.4之后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluateJavascript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javaScriptString:YourFunction()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ValueCallback&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> voidon </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReceiveValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="ios-wkwebview-的-evaluatejavascript-方法" tabindex="-1">IOS =&gt; WKWebView 的 evaluateJavaScript() 方法 <a class="header-anchor" href="#ios-wkwebview-的-evaluatejavascript-方法" aria-label="Permalink to &quot;IOS =&gt; WKWebView 的 evaluateJavaScript() 方法&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluateJavaScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YourFunction()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, completionHandler: nil);</span></span></code></pre></div><h3 id="js-web-native" tabindex="-1">JS（web） =&gt; Native <a class="header-anchor" href="#js-web-native" aria-label="Permalink to &quot;JS（web） =&gt; Native&quot;">​</a></h3><hr><h4 id="拦截url-schema" tabindex="-1">拦截URL Schema <a class="header-anchor" href="#拦截url-schema" aria-label="Permalink to &quot;拦截URL Schema&quot;">​</a></h4><p>Android 和 iOS 都可以通过拦截 Webview请求的URL Scheme， 并解析 Scheme 来决定是否进行对应的 Native 代码逻辑处理。</p><hr><p>Android 的话，Webview 提供了 shouldOverrideUrlLoading 方法来提供给 Native 拦截 H5 发送的 URL Scheme 请求</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setWebViewClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebViewClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldOverrideUrlLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebView </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (url.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scheme://&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 这是一个从 JavaScript 发出的调用，拦截这个请求，不让 WebView 加载这个 URL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 从 URL 中解析出命令和参数...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示这个 URL 已经被处理了，WebView 不需要再加载它了。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示这个 URL 没有被处理，让 WebView 继续加载它。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><p>iOS 的 WKWebview ，使用decidePolicyForNavigationAction</p><h4 id="向webview注入js-api" tabindex="-1">向WebView注入JS API <a class="header-anchor" href="#向webview注入js-api" aria-label="Permalink to &quot;向WebView注入JS API&quot;">​</a></h4><blockquote><p>Android =&gt; addJavascriptInterface()</p></blockquote><p>在 Android 端，通过 WebView 的<code>addJavascriptInterface() </code>方法向 JavaScript 提供 Android 对象。 可以创建一个类（例如 NativeBridge），在这个类中定义一些供 JavaScript 调用的方法。然后通过 addJavascriptInterface() 方法将这个类的一个实例传递给 WebView</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativeBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 增加JS调用接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JavascriptInterface</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourFunctionFromAndroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行的操作...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addJavascriptInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativeBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NativeBridge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>然后JS端就可以调用这个暴露出的方法了</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.NativeBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourFunctionFromAndroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from JS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><blockquote><p>IOS =&gt; WKScriptMessageHandler</p></blockquote><ul><li>iOS的UIWebView(早 oout 了)提供了<strong>JavaSciptCore</strong></li><li>iOS的WKWebView提供了<strong>WKScriptMessageHandler</strong></li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WKWebViewConfiguration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[WKWebViewConfiguration alloc] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WKPreferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [WKPreferences new];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preferences.javaScriptCanOpenWindowsAutomatically </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> YES;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preferences.minimumFontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configuration.preferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> preferences;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (void)viewWillAppear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BOOL)animated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewWillAppear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animated];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.webView.configuration.userContentController addScriptMessageHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;share&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.webView.configuration.userContentController addScriptMessageHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pickImage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (void)viewWillDisappear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BOOL)animated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewWillDisappear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animated];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.webView.configuration.userContentController 	removeScriptMessageHandlerForName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;share&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.webView.configuration.userContentController removeScriptMessageHandlerForName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pickImage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JS 调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.webkit.messageHandlers.share.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xxx);</span></span></code></pre></div><hr><ul><li><a href="https://juejin.cn/post/6844903585268891662?searchId=2024041409333702B10A4DC95596E6CE48#heading-7" target="_blank" rel="noreferrer">JSBridge的原理 - 掘金</a></li><li><a href="https://juejin.cn/post/6936814903021797389?searchId=2024041409333702B10A4DC95596E6CE48#heading-4" target="_blank" rel="noreferrer">深入浅出JSBridge：从原理到使用 - 掘金</a></li><li><a href="https://juejin.cn/post/6844904070881214471?searchId=2024041409333702B10A4DC95596E6CE48#heading-3" target="_blank" rel="noreferrer">小白必看，JSBridge 初探 - 掘金</a></li></ul>`,40),l=[t];function h(p,k,r,E,d,g){return a(),i("div",null,l)}const y=s(e,[["render",h]]);export{c as __pageData,y as default};
