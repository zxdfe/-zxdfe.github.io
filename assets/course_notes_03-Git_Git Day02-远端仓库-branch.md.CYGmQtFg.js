import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.C5O6QHj3.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"course/notes/03-Git/Git Day02-远端仓库-branch.md","filePath":"course/notes/03-Git/Git Day02-远端仓库-branch.md"}'),t={name:"course/notes/03-Git/Git Day02-远端仓库-branch.md"},e=n(`<h2 id="git远程仓库" tabindex="-1">Git远程仓库 <a class="header-anchor" href="#git远程仓库" aria-label="Permalink to &quot;Git远程仓库&quot;">​</a></h2><blockquote><p><a href="https://zxdfe.notion.site/zxdfe/Git-02-7eb1666c21f64fe4b7709ae5cef926f8#c3740c2308da45d2b4ea4714c053127f" target="_blank" rel="noreferrer">notion地址 day-02</a></p></blockquote><h3 id="_1-开源" tabindex="-1">1. 开源 <a class="header-anchor" href="#_1-开源" aria-label="Permalink to &quot;1. 开源&quot;">​</a></h3><blockquote><p>开源就是开发源代码，代码公开</p></blockquote><h3 id="_2-代码托管平台" tabindex="-1">2. 代码托管平台， <a class="header-anchor" href="#_2-代码托管平台" aria-label="Permalink to &quot;2. 代码托管平台，&quot;">​</a></h3><ol><li>GitHub 全球最大的开源项目托管平台 国外</li><li>Gitee 国内开源 git 代码托管平台</li><li>Gitlab ==&gt; 企业级 git 代码托管平台</li></ol><p>=&gt; 上面三个平台，都用Git来管理项目代码</p><blockquote><p>git 是版本控制工具</p></blockquote><h3 id="_3-远程仓库" tabindex="-1">3. 远程仓库 <a class="header-anchor" href="#_3-远程仓库" aria-label="Permalink to &quot;3. 远程仓库&quot;">​</a></h3><h4 id="_3-1-远程仓库解决了什么问题" tabindex="-1">3.1 远程仓库解决了什么问题 <a class="header-anchor" href="#_3-1-远程仓库解决了什么问题" aria-label="Permalink to &quot;3.1 远程仓库解决了什么问题&quot;">​</a></h4><ol><li>仓库备份（远程备份不易丢失）</li><li>多人协作（远程仓库同步代码）</li></ol><h4 id="_3-2-常见的代码托管平台几个" tabindex="-1">3.2 常见的代码托管平台几个? <a class="header-anchor" href="#_3-2-常见的代码托管平台几个" aria-label="Permalink to &quot;3.2 常见的代码托管平台几个?&quot;">​</a></h4><p>github 、 gitee 、gitlab</p><h4 id="_3-3-如何生成ssh-key秘钥" tabindex="-1">3.3 如何生成ssh-key秘钥 <a class="header-anchor" href="#_3-3-如何生成ssh-key秘钥" aria-label="Permalink to &quot;3.3 如何生成ssh-key秘钥&quot;">​</a></h4><p><a href="https://gitee.com/help/articles/4181" target="_blank" rel="noreferrer">https://gitee.com/help/articles/4181</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 生成密钥对</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ed25519</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxxxx@xxxxx.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generating public/private ed25519 key pair...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.查看公钥，在平台上配置公钥</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_ed25519.pub</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ssh-ed25519 AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 检验是否本地和远端可以通讯，是否配置好（这个例子是gitee）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@gitee.com</span></span></code></pre></div><h2 id="git命令" tabindex="-1">git命令 <a class="header-anchor" href="#git命令" aria-label="Permalink to &quot;git命令&quot;">​</a></h2><h3 id="_1-git-push" tabindex="-1">1. git push <a class="header-anchor" href="#_1-git-push" aria-label="Permalink to &quot;1. git push&quot;">​</a></h3><blockquote><p>将本地仓库的代码提交到远端仓库 <code>git push 仓库地址 分支名</code></p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// git push 在推送自己代码到远端之前, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果远端又更新, 需要先拉取一下最新的代码到本地. 先git pull</span></span></code></pre></div><h3 id="_2-git-remote" tabindex="-1">2. git remote <a class="header-anchor" href="#_2-git-remote" aria-label="Permalink to &quot;2. git remote&quot;">​</a></h3><blockquote><p>每次push都带上远程仓库地址，就很麻烦，我们可以给远程仓库设置一个别名</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// git remote add 仓库别名 仓库地址</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote add origin 仓库地址  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看远端仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除rm别名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote rm origin</span></span></code></pre></div><h3 id="_3-git-push-u-关联" tabindex="-1">3. git push -u 关联 <a class="header-anchor" href="#_3-git-push-u-关联" aria-label="Permalink to &quot;3. git push -u 关联&quot;">​</a></h3><blockquote><p>-u 记录push到远端分支的默认值， 以后git push即可。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// git push -u 仓库别名 分支名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u origin master </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关联绑定好之后，以后 可以直接 git push</span></span></code></pre></div><h3 id="_4-git-clone" tabindex="-1">4. git clone <a class="header-anchor" href="#_4-git-clone" aria-label="Permalink to &quot;4. git clone&quot;">​</a></h3><blockquote><p>克隆远程仓库的代码到本地</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// git clone 远程仓库地址  [可以重命名]</span></span></code></pre></div><h3 id="_5-git-pull-拉取" tabindex="-1">5. git pull 拉取 <a class="header-anchor" href="#_5-git-pull-拉取" aria-label="Permalink to &quot;5.  git pull 拉取&quot;">​</a></h3><blockquote><p>拉取代码的更新，将远程的代码下载合并到本地的分支</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// git pull 远程仓库地址 分支名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull origin master</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如果关联过  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u 过 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简写=&gt; git pull</span></span></code></pre></div><h2 id="_3-分支branch" tabindex="-1">3. 分支branch <a class="header-anchor" href="#_3-分支branch" aria-label="Permalink to &quot;3. 分支branch&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/302528/1681637988753-dc4a0ca6-89c9-445d-914f-5a9d58e1362f.png#averageHue=%23f7f6f6&amp;clientId=ub9f54e8b-918b-4&amp;from=paste&amp;height=276&amp;id=u9bc6730d&amp;originHeight=782&amp;originWidth=2013&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=352284&amp;status=done&amp;style=none&amp;taskId=u8f8def45-02ce-4020-a565-6efda29f6be&amp;title=&amp;width=711" alt="image.png"></p><h3 id="_1-分支的本质" tabindex="-1">1. 分支的本质 <a class="header-anchor" href="#_1-分支的本质" aria-label="Permalink to &quot;1. 分支的本质&quot;">​</a></h3><blockquote><p>分支的本质： 分支实质上是一个指针，指向某个提交的版本 每次代码提交后，这个分支指针就会向后移动，保证一直指向的是最后一次提交的版本</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/302528/1681638118781-3e105479-652a-4133-b88a-3ae2c5c5fbbd.png#averageHue=%23f9f2f2&amp;clientId=ub9f54e8b-918b-4&amp;from=paste&amp;height=242&amp;id=ue6597704&amp;originHeight=363&amp;originWidth=972&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=146991&amp;status=done&amp;style=none&amp;taskId=u6f19fe03-15fd-4de1-8b1a-43c6124499e&amp;title=&amp;width=648" alt="image.png"></p><h3 id="_2-如何区分当前正在哪个分支上" tabindex="-1">2. 如何区分当前正在哪个分支上 <a class="header-anchor" href="#_2-如何区分当前正在哪个分支上" aria-label="Permalink to &quot;2. 如何区分当前正在哪个分支上&quot;">​</a></h3><blockquote><p>head指针 标记当前分支</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/302528/1681638414923-ec72b15e-1a60-453d-9a3f-a2f0516eed1f.png#averageHue=%23fefefd&amp;clientId=ub9f54e8b-918b-4&amp;from=paste&amp;height=243&amp;id=u740de149&amp;originHeight=364&amp;originWidth=757&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=94530&amp;status=done&amp;style=none&amp;taskId=u8d00ff33-a6a6-4392-af52-6bea695f0ed&amp;title=&amp;width=504.6666666666667" alt="image.png"></p><h3 id="_1-git-branch" tabindex="-1">1. git branch <a class="header-anchor" href="#_1-git-branch" aria-label="Permalink to &quot;1. git branch&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在仓库目录下输入如下命令  查看分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 branch 后面加上一个名字, 代表创建一个新分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 新分支名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 创建的分支是基于当前所处的分支创建的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 如果在master分支上创建新分支，创建完后, 用户还是处在master分支上</span></span></code></pre></div><h3 id="_2-git-checkout-切换分支" tabindex="-1">2. git checkout 切换分支 <a class="header-anchor" href="#_2-git-checkout-切换分支" aria-label="Permalink to &quot;2. git checkout 切换分支&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定分支名字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如: 切换到login分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><h3 id="_3-快速创建并切换" tabindex="-1">3. 快速创建并切换 <a class="header-anchor" href="#_3-快速创建并切换" aria-label="Permalink to &quot;3. 快速创建并切换&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -b 表示创建一个新分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># checkout 表示切换到刚才新建的分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支名称</span></span></code></pre></div><h3 id="_4-合并分支" tabindex="-1">4. 合并分支 <a class="header-anchor" href="#_4-合并分支" aria-label="Permalink to &quot;4. 合并分支&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 切换到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 在master 分支上运行 git merge 命令，将 login 分支的代码合班到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并分支时的注意点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设要把 login 分支的代码合并到 test 分支，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 则必须先切换到 test 分支上，再运行 git merge 命令，来合并 login 分支！</span></span></code></pre></div><h3 id="_5-删除分支" tabindex="-1">5. 删除分支 <a class="header-anchor" href="#_5-删除分支" aria-label="Permalink to &quot;5. 删除分支&quot;">​</a></h3><p>当把功能分支的代码合并到 master 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意要删除某个分支时, 不能在那个分支上面</span></span></code></pre></div><h3 id="_6-git冲突的解决" tabindex="-1">6. Git冲突的解决 <a class="header-anchor" href="#_6-git冲突的解决" aria-label="Permalink to &quot;6. Git冲突的解决&quot;">​</a></h3><p>如果<strong>在两个不同的分支中</strong>，对<strong>同一个文件</strong>进行了<strong>不同的修改</strong>，Git 就没法干净的合并它们。 此时，我们需要打开 <img src="https://cdn.nlark.com/yuque/0/2023/png/302528/1681637124555-9ace9b33-1921-439a-a898-36645a3dc4f7.png#averageHue=%2369875a&amp;clientId=ub9f54e8b-918b-4&amp;from=paste&amp;id=u49b3f48d&amp;originHeight=386&amp;originWidth=1468&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=82907&amp;status=done&amp;style=none&amp;taskId=u4d54816b-e0f6-4f95-aebc-9fdf752be79&amp;title=" alt="image.png"></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 从master上创建一个login分支并切换过去</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在login分支上修改了login.html这个代码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 提交到本地</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 切换到master分支上  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在master分支上,又对这个login.html 做了修改 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 合并 在master分支上 做了 git merge login  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这个时候,就产生了冲突</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">手动解决冲突,保留自己想要的那部分代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解决冲突&quot;</span></span></code></pre></div><ol><li>采用当前更改 2. 采用传入更改 3. 保留双方更改 4. 比较变更</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  HEAD </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的是当前分支上修改的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">========</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的是要merge过来的那个分支的修改内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tab</span></span></code></pre></div>`,56),l=[e];function p(h,k,r,o,c,d){return i(),a("div",null,l)}const b=s(t,[["render",p]]);export{u as __pageData,b as default};
