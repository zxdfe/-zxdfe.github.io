import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.C5O6QHj3.js";const n="/assets/image-20220820004149296.BYXvMDL3.png",e="/assets/image-20220820004725265.UItg-nrr.png",h="/assets/image-20220820004857492.DOuvK7H9.png",l="/assets/image-20220820005036127.B8pybUj5.png",p="/assets/image-20220820011539020.8LLlMD7B.png",k="/assets/image-20220820011813292.C8-b0omn.png",r="/assets/image-20220820011941955.5VBMSOMj.png",d="/assets/image-20220820012154069.BaSYafeX.png",g="/assets/image-20220820012320446.CICu-7Xr.png",o="/assets/image-20220821190406691.Bh4VCnOy.png",c="/assets/image-20220822041114405.BA-uMg2K.png",F="/assets/image-20220822041541378.DTXMTEVS.png",u="/assets/image-20220822041931938.DiQP5Ko6.png",y="/assets/image-20220822042627682.3za5YxcS.png",b="/assets/image-20230415225344637.3dxGa2D4.png",C="/assets/image-20220823224421509.hQNeZsEg.png",m="/assets/image-20220823224627530.BACUTA17.png",B="/assets/image-20220823224856380.95bu8PGH.png",E="/assets/image-20220823225201098.YTI5Z02e.png",_="/assets/image-20220823225447570.DdKm5ezT.png",v="/assets/image-20220823225718713.DVU0Gorg.png",A="/assets/image-20220823230334040.3yD73IQ7.png",D="/assets/image-20220823230428563.C1kEFpNH.png",q="/assets/image-20220824014453251.DURvmV31.png",f="/assets/image-20220822043116747.CkF9WFiE.png",S="/assets/image-20220822043206382.BpycfbPl.png",x="/assets/image-20220822043344196.DDZ1ruT0.png",P="/assets/image-20220822043500635.Bt0VOZto.png",H="/assets/image-20220822043752704.DAtT7G8i.png",G="/assets/image-20220822044132776.fVn6Akr6.png",T="/assets/image-20220822044420758.DAEU48bU.png",w="/assets/image-20220822044617886.dPnQ504Z.png",V="/assets/image-20220822044908375.CmLkl0mI.png",j="/assets/image-20220822045334499.bvH0BOrL.png",M="/assets/image-20220824030128353.C7wFPIxe.png",X=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"course/target/04-Git/day02/day02.md","filePath":"course/target/04-Git/day02/day02.md"}'),I={name:"course/target/04-Git/day02/day02.md"},N=t('<h2 id="target" tabindex="-1">Target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;Target&quot;">​</a></h2><ol><li>能够知道Github的作用</li><li>能够创建并配置Github账号</li><li>能够在Github中创建仓库并使用</li><li>能够知道分支的作用</li><li>能够创建分支与合并</li><li>能够操作远程分支</li></ol><p>💡🚀🤟👉👇☀️🍉🍍🍇🍓🥕🍭🎖️🎁☘️🍀💯🔆❗🔥🚩</p><h2 id="_1-开源" tabindex="-1">1. 开源 <a class="header-anchor" href="#_1-开源" aria-label="Permalink to &quot;1. 开源&quot;">​</a></h2><h3 id="_1-1-基本概念" tabindex="-1">1.1 基本概念 <a class="header-anchor" href="#_1-1-基本概念" aria-label="Permalink to &quot;1.1 基本概念&quot;">​</a></h3><p><img src="'+n+'" alt="image-20220820004149296"></p><h3 id="_1-2-开源协议" tabindex="-1">1.2 开源协议 <a class="header-anchor" href="#_1-2-开源协议" aria-label="Permalink to &quot;1.2 开源协议&quot;">​</a></h3><p>开源并不意味着完全没有限制，为了<strong>限制使用者的使用范围</strong>和<strong>保护作者的权利</strong>，每个开源项目都应该遵守<strong>开源许可协议</strong>（Open Source License）</p><h3 id="_1-3-为什么拥抱开源" tabindex="-1">1.3 为什么拥抱开源 <a class="header-anchor" href="#_1-3-为什么拥抱开源" aria-label="Permalink to &quot;1.3 为什么拥抱开源&quot;">​</a></h3><p><img src="'+e+'" alt="image-20220820004725265"></p><ul><li>第三点不太认可哈，看什么项目了~~</li></ul><h3 id="_1-4-托管平台" tabindex="-1">1.4 托管平台 <a class="header-anchor" href="#_1-4-托管平台" aria-label="Permalink to &quot;1.4 托管平台&quot;">​</a></h3><p><img src="'+h+'" alt="image-20220820004857492"></p><h2 id="_2-github" tabindex="-1">2. GitHub <a class="header-anchor" href="#_2-github" aria-label="Permalink to &quot;2. GitHub&quot;">​</a></h2><p><img src="'+l+'" alt="image-20220820005036127"></p><blockquote><p>Pull Request 解释 : 我改了你们的代码，请拉回去看看吧</p></blockquote><h3 id="_2-1-注册github" tabindex="-1">2.1 注册Github <a class="header-anchor" href="#_2-1-注册github" aria-label="Permalink to &quot;2.1 注册Github&quot;">​</a></h3><p><img src="'+p+'" alt="image-20220820011539020"></p><h3 id="_2-2-远程仓库" tabindex="-1">2.2 远程仓库 <a class="header-anchor" href="#_2-2-远程仓库" aria-label="Permalink to &quot;2.2 远程仓库&quot;">​</a></h3><h4 id="_1-新建空白远程仓库" tabindex="-1">1. 新建空白远程仓库 <a class="header-anchor" href="#_1-新建空白远程仓库" aria-label="Permalink to &quot;1. 新建空白远程仓库&quot;">​</a></h4><p><img src="'+k+'" alt="image-20220820011813292"></p><h4 id="_2-远程仓库的两种访问方式" tabindex="-1">2. 远程仓库的两种访问方式 <a class="header-anchor" href="#_2-远程仓库的两种访问方式" aria-label="Permalink to &quot;2. 远程仓库的两种访问方式&quot;">​</a></h4><p><img src="'+r+'" alt="image-20220820011941955"></p><p><img src="'+d+`" alt="image-20220820012154069"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  将当前主分支改名为 main  -M 强制 rename</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 黑人敏感词 master ？？ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main 更短，简明扼要！</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 更容易记住；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如果让我的任何队友都感到舒适，那就开始吧！</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 甚至不会让黑人在科技界感到更加孤立；</span></span></code></pre></div><h5 id="添加远程仓库" tabindex="-1">添加远程仓库 <a class="header-anchor" href="#添加远程仓库" aria-label="Permalink to &quot;添加远程仓库&quot;">​</a></h5><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote add [shortname] [url]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地仓库与远程仓库建立连接 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote add origin git地址</span></span></code></pre></div><p>这个<code>origin</code>其实就是要添加的这个远程仓库<code>http:://xxx.git</code>的名称，还有upstream经常也会看到</p><h5 id="查看当前的远程库" tabindex="-1">查看当前的远程库 <a class="header-anchor" href="#查看当前的远程库" aria-label="Permalink to &quot;查看当前的远程库&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</span></span></code></pre></div><h4 id="_3-基于https上传-🔥" tabindex="-1">3. 基于HTTPS上传 🔥 <a class="header-anchor" href="#_3-基于https上传-🔥" aria-label="Permalink to &quot;3. 基于HTTPS上传 🔥&quot;">​</a></h4><p><img src="`+g+`" alt="image-20220820012320446"></p><h4 id="_4-git-push-🔥" tabindex="-1">4. git push 🔥 <a class="header-anchor" href="#_4-git-push-🔥" aria-label="Permalink to &quot;4. git push 🔥&quot;">​</a></h4><blockquote><p><strong>git push</strong> 命令用于从将本地的分支版本上传到远程并合并。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">远程主机</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">本地分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>以下命令将本地的 master 分支推送到 origin 主机的 master 分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # origin 远程仓库的别名， master 本地分支名</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加上了-u参数，Git不但会把本地的master分支内容推送的远程origin仓库，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 还会把本地的master分支和远程的origin仓库关联起来，在以后的推送或者拉取时就可以简化命令</span></span></code></pre></div><blockquote><p>第一次推送 : git push -u origin master</p></blockquote><ul><li>将本地的master分支和远程仓库的master分支绑定，这样的话以后每次的push操作都可以简化为git push而非git push origin master了。</li></ul><h4 id="_5-ssh-key-🔥" tabindex="-1">5. SSH key 🔥 <a class="header-anchor" href="#_5-ssh-key-🔥" aria-label="Permalink to &quot;5. SSH key 🔥&quot;">​</a></h4><p><code>SSH key</code> 的<strong>作用</strong>：实现本地仓库和 <code>Github</code> 之间免登录的加密数据传输。</p><p><code>SSH key</code> 的<strong>好处</strong>：免登录身份认证、数据加密传输。</p><p><code>SSH key</code> 由<strong>两部分组成</strong>，分别是：</p><p>① <code>id_rsa</code>（私钥文件，存放于客户端的电脑中即可）</p><p>② <code>id_rsa.pub</code>（公钥文件，需要配置到 <code>Github</code> 中）</p><h5 id="生成ssh-key" tabindex="-1">生成SSH key <a class="header-anchor" href="#生成ssh-key" aria-label="Permalink to &quot;生成SSH key&quot;">​</a></h5><blockquote><p><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noreferrer">官方-生成新的SSH</a></p></blockquote><p>① 打开 Git Bash</p><p>② 粘贴如下的命令，并将 <code>your_email@example.com</code> 替换为注册 <code>Github</code> 账号时填写的邮箱：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ed25519</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your_email@example.com&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注：如果您使用的是不支持 Ed25519 算法的旧系统，请使用以下命令：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4096</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your_email@example.com&quot;</span></span></code></pre></div><p>以下步骤, 直接敲回车略过就好</p><p><img src="`+o+`" alt="image-20220821190406691"></p><p>③ 连续敲击 3 次回车，即可在 <code>C:\\Users\\用户名文件夹\\.ssh</code> 目录中生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件</p><h5 id="配置添加-ssh-秘钥" tabindex="-1">配置添加 SSH 秘钥 <a class="header-anchor" href="#配置添加-ssh-秘钥" aria-label="Permalink to &quot;配置添加 SSH 秘钥&quot;">​</a></h5><blockquote><p><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noreferrer">添加 SSH 秘钥</a></p></blockquote><p>① 使用记事本打开 <code>id_rsa.pub</code> 文件，复制里面的文本内容</p><p>② 在浏览器中登录 <code>Github</code>，点击头像 -&gt; <code>Settings -&gt; SSH and GPG Keys -&gt; New SSH key</code></p><p>③ 将 <code>id_rsa.pub</code> 文件中的内容，粘贴到 <code>Key</code> 对应的文本框中</p><p>④ 在 <code>Title</code> 文本框中添加新密钥添加描述性标签, 如果您使用的是个人 Mac，此密钥名称可能是 &quot;Personal MacBook Air&quot;。</p><ul><li>需要输入密码确认操作</li></ul><h5 id="检测ssh-key是否配置成功" tabindex="-1">检测SSH key是否配置成功 <a class="header-anchor" href="#检测ssh-key是否配置成功" aria-label="Permalink to &quot;检测SSH key是否配置成功&quot;">​</a></h5><blockquote><p><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection" target="_blank" rel="noreferrer">测试 SSH 连接</a></p></blockquote><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com</span></span></code></pre></div><p>您可能会看到类似如下的警告：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> The authenticity of host </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;github.com (IP ADDRESS)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t be established.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt; RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt; Are you sure you want to continue connecting (yes/no)?</span></span></code></pre></div><p>验证所看到消息中的指纹是否匹配 <a href="https://docs.github.com/cn/github/authenticating-to-github/githubs-ssh-key-fingerprints" target="_blank" rel="noreferrer">GitHub 的公钥指纹</a>。 如果是，则输入 <code>yes</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hi username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> You</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;ve successfully authenticated, but GitHub does not</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&gt; provide shell access.</span></span></code></pre></div><h4 id="_6-基于ssh上传" tabindex="-1">6. 基于SSH上传 <a class="header-anchor" href="#_6-基于ssh上传" aria-label="Permalink to &quot;6. 基于SSH上传&quot;">​</a></h4><ol><li>先本地创建一个项目文件夹, 并在项目中添加一些新的文件</li><li>运行 <code>git init</code> 初始化新的创库</li><li>检查当前工作区状态 <code>git status -s</code></li><li>运行 <code>git add .</code> 将文件都添加进暂存区 , 并再次检查文件状态 <code>git status -s</code></li><li>运行 <code>git commit -m &quot;初始化项目&quot;</code> (描述信息可以自定义)</li><li>到此, 我们完成了一个本地的版本提交 , 但是并没有同步到远端.</li></ol><h5 id="github端新建仓库" tabindex="-1">Github端新建仓库 <a class="header-anchor" href="#github端新建仓库" aria-label="Permalink to &quot;Github端新建仓库&quot;">​</a></h5><ol><li>顶部右侧头像处点击新建一个空仓库 Repository /rɪˈpɒːzətɔːri/</li></ol><p><img src="`+c+'" alt="image-20220822041114405"></p><ol start="2"><li>给新建的仓库命名, 可以写上一条描述语句, 其他都不需要勾选, 直接点击 <code>Create repository</code></li></ol><p><img src="'+F+'" alt="image-20220822041541378"></p><ol start="3"><li>因为我们刚才已经初始化好了一个本地的仓库, 所以现在可以直接选择第二个方框中命令操作, 注意切换为SSH</li></ol><p><img src="'+u+`" alt="image-20220822041931938"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 粘贴这句在刚才项目终端中, 点击回车, 建立远端仓库的链接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:zxdfe/project_new.git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.新建一个main分支, 可以不用做这一条操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git branch -M main</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git push -u origin main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.如果不新建分支, 那么只需要 粘贴这句, 回车 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>在Git Bash终端中, 右键复制上方两条命令 回车执行. 注意 , 需要是在当前项目下</p><h4 id="_7-clone远程仓库" tabindex="-1">7. clone远程仓库 <a class="header-anchor" href="#_7-clone远程仓库" aria-label="Permalink to &quot;7. clone远程仓库&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以 选择HTTPS 或者 SSH 都行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程仓库地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如下载Vue的项目源码, 可以使用如下命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:vuejs/vue.git</span></span></code></pre></div><p><img src="`+y+'" alt="image-20220822042627682"></p><h2 id="gitee" tabindex="-1">Gitee <a class="header-anchor" href="#gitee" aria-label="Permalink to &quot;Gitee&quot;">​</a></h2><h3 id="_1-远程仓库" tabindex="-1">1. 远程仓库 <a class="header-anchor" href="#_1-远程仓库" aria-label="Permalink to &quot;1. 远程仓库&quot;">​</a></h3><h4 id="远程仓库解决了什么问题" tabindex="-1">远程仓库解决了什么问题？ <a class="header-anchor" href="#远程仓库解决了什么问题" aria-label="Permalink to &quot;远程仓库解决了什么问题？&quot;">​</a></h4><p><img src="'+b+'" alt="image-20230415225344637"></p><h4 id="_1-1-新建仓库" tabindex="-1">1.1 新建仓库 <a class="header-anchor" href="#_1-1-新建仓库" aria-label="Permalink to &quot;1.1 新建仓库&quot;">​</a></h4><p><img src="'+C+'" alt="image-20220823224421509"></p><p><img src="'+m+'" alt="image-20220823224627530"></p><h4 id="_1-2-关联远端仓库https" tabindex="-1">1.2 关联远端仓库HTTPS <a class="header-anchor" href="#_1-2-关联远端仓库https" aria-label="Permalink to &quot;1.2 关联远端仓库HTTPS&quot;">​</a></h4><p><img src="'+B+`" alt="image-20220823224856380"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gitee.com/vrfe/git-project.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;master&quot;</span></span></code></pre></div><h5 id="输入gitee码云的-邮箱-和-密码" tabindex="-1">输入gitee码云的 邮箱 和 密码 <a class="header-anchor" href="#输入gitee码云的-邮箱-和-密码" aria-label="Permalink to &quot;输入gitee码云的 邮箱 和 密码&quot;">​</a></h5><ul><li>注意这里的用户名是输入邮箱! 输入完确认后, 会自动执行刚才的push推送命令</li></ul><p><img src="`+E+'" alt="image-20220823225201098"></p><p>看到类似下图的显示, 表示已经将我们本地的代码推送的远端仓库了</p><p><img src="'+_+'" alt="image-20220823225447570"></p><h5 id="查看远端仓库" tabindex="-1">查看远端仓库 <a class="header-anchor" href="#查看远端仓库" aria-label="Permalink to &quot;查看远端仓库&quot;">​</a></h5><ul><li>如果远端仓库项目中已经有了我们本地的代码, 同样说明已经推送成功!</li></ul><p><img src="'+v+`" alt="image-20220823225718713"></p><h5 id="第二次推送-https的情况" tabindex="-1">第二次推送 HTTPS的情况 <a class="header-anchor" href="#第二次推送-https的情况" aria-label="Permalink to &quot;第二次推送 HTTPS的情况&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 之后每次修改代码 , 提交本地更新 (提交到本地仓库后), 可以继续将更新同步推送到远端仓库</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改代码后, 依次使用命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 查看</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 添加到暂存区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;msg&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 提交更新版本, 本地仓库永久保存了这一版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 推送到远端仓库</span></span></code></pre></div><h4 id="_1-3-使用ssh的方式" tabindex="-1">1.3 使用SSH的方式 <a class="header-anchor" href="#_1-3-使用ssh的方式" aria-label="Permalink to &quot;1.3 使用SSH的方式&quot;">​</a></h4><p>点击头像下方的设置</p><p><img src="`+A+'" alt="image-20220823230334040"></p><p>找到左侧的 SSH公钥, 点击怎样生成公钥</p><p><img src="'+D+`" alt="image-20220823230428563"></p><h5 id="生成添加ssh公钥" tabindex="-1">生成添加SSH公钥 <a class="header-anchor" href="#生成添加ssh公钥" aria-label="Permalink to &quot;生成添加SSH公钥&quot;">​</a></h5><p><a href="https://gitee.com/help/articles/4181#article-header0" target="_blank" rel="noreferrer">Gitee-SSH公钥</a></p><p>简单解释下:</p><p>既然是加密，那肯定是不希望别人知道我的消息，所以只有我才能解密，所以可得出<strong>公钥负责加密，私钥负责解密</strong>；同理，既然是签名，那肯定是不希望有人冒充我发消息，只有我才能发布这个签名，所以可得出<strong>私钥负责签名，公钥负责验证</strong>。</p><blockquote><p>公钥加密, 私钥解密</p><p>私钥签名, 公钥验证</p></blockquote><p>公钥和私钥成对出现~~~~</p><blockquote><p>生成SSH 秘钥</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ed25519</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxxxx@xxxxx.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generating public/private ed25519 key pair...</span></span></code></pre></div><p>按照提示完成三次回车，即可生成 ssh key。通过查看 <code>~/.ssh/id_ed25519.pub</code> 文件内容，获取到你的 public key</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_ed25519.pub</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ssh-ed25519 AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Ctrl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 复制</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h5 id="添加关联远程仓库" tabindex="-1">添加关联远程仓库 <a class="header-anchor" href="#添加关联远程仓库" aria-label="Permalink to &quot;添加关联远程仓库&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@gitee.com:vrfe/git-project.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;master&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为刚才已经添加过origin别名的远程仓库了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新添加远程仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@gitee.com:vrfe/git-project.git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git push  ==&gt; 不能这么推送, 相当于第一次推送了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;master&quot;</span></span></code></pre></div><h5 id="报错解决" tabindex="-1">报错解决 <a class="header-anchor" href="#报错解决" aria-label="Permalink to &quot;报错解决&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fatal:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    --set-upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 为当前本地分支设置默认远程分支。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">===&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">简写</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><h5 id="常见命令" tabindex="-1">常见命令 <a class="header-anchor" href="#常见命令" aria-label="Permalink to &quot;常见命令&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一些常见命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat 查看文件内容  ~/ 表示用户目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mkdir 新建文件夹</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># touch 新建文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cd 进入某个文件   cd .. 回到上一层目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># . 表示当前目录  .. 表示上一层目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># clear 清除控制台  terminal中也可以 ==&gt; cls</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ls 显示没有隐藏的文件与文件夹  查看文件列表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ll 查看文件列表详情</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ls -a 显示所有文件与文件夹(包括 隐藏文件 ./和 ../)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pwd 显示用户当前目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用vim编辑器 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  编辑文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  进入编辑模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 不保存退出</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (若有修改提示报错)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:q!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 强制不保存退出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  保存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:wq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 强制保存并退出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">按ESC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 退出编辑模式</span></span></code></pre></div><h4 id="_1-4-vscode-切换默认的终端" tabindex="-1">1.4 VSCode 切换默认的终端 <a class="header-anchor" href="#_1-4-vscode-切换默认的终端" aria-label="Permalink to &quot;1.4 VSCode 切换默认的终端&quot;">​</a></h4><p><img src="`+q+'" alt="image-20220824014453251"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre></div><h2 id="_3-分支branch" tabindex="-1">3. 分支branch <a class="header-anchor" href="#_3-分支branch" aria-label="Permalink to &quot;3. 分支branch&quot;">​</a></h2><p><img src="'+f+'" alt="image-20220822043116747"></p><h3 id="_3-1-分支在实际开发中的作用" tabindex="-1">3.1 分支在实际开发中的作用 <a class="header-anchor" href="#_3-1-分支在实际开发中的作用" aria-label="Permalink to &quot;3.1 分支在实际开发中的作用&quot;">​</a></h3><p><img src="'+S+'" alt="image-20220822043206382"></p><h3 id="_3-2-master主分支" tabindex="-1">3.2 master主分支 <a class="header-anchor" href="#_3-2-master主分支" aria-label="Permalink to &quot;3.2 master主分支&quot;">​</a></h3><p><img src="'+x+'" alt="image-20220822043344196"></p><h3 id="_3-3-功能分支" tabindex="-1">3.3 功能分支 <a class="header-anchor" href="#_3-3-功能分支" aria-label="Permalink to &quot;3.3 功能分支&quot;">​</a></h3><p><img src="'+P+`" alt="image-20220822043500635"></p><h3 id="_3-3-查看分支列表" tabindex="-1">3.3 查看分支列表 <a class="header-anchor" href="#_3-3-查看分支列表" aria-label="Permalink to &quot;3.3 查看分支列表&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在仓库目录下输入如下命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span></span></code></pre></div><p><img src="`+H+`" alt="image-20220822043752704"></p><p>**注意：**分支名字前面的 ***** 号表示当前所处的分支。</p><h3 id="_3-4-创建新分支" tabindex="-1">3.4 创建新分支 <a class="header-anchor" href="#_3-4-创建新分支" aria-label="Permalink to &quot;3.4 创建新分支&quot;">​</a></h3><p>使用如下的命令，可以<strong>基于当前分支</strong>，<strong>创建一个新的分支</strong>，此时，新分支中的代码和当前分支完全一样：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 branch 后面加上一个名字, 代表创建一个新分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 新分支名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 创建的分支是基于当前所处的分支创建的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 创建完后, 用户还是处在master分支上</span></span></code></pre></div><p><img src="`+G+`" alt="image-20220822044132776"></p><h3 id="_3-5-切换分支" tabindex="-1">3.5 切换分支 <a class="header-anchor" href="#_3-5-切换分支" aria-label="Permalink to &quot;3.5 切换分支&quot;">​</a></h3><p>使用如下的命令，可以<strong>切换到指定的分支上</strong>进行开发：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定分支名字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如: 切换到login分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><p>图示如下</p><p><img src="`+T+`" alt="image-20220822044420758"></p><h3 id="_3-6-快速创建和切换" tabindex="-1">3.6 快速创建和切换 <a class="header-anchor" href="#_3-6-快速创建和切换" aria-label="Permalink to &quot;3.6 快速创建和切换&quot;">​</a></h3><p>使用如下的命令，可以<strong>创建指定名称的新分支</strong>，并<strong>立即切换到新分支上</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -b 表示创建一个新分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># checkout 表示切换到刚才新建的分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支名称</span></span></code></pre></div><p><img src="`+w+`" alt="image-20220822044617886"></p><blockquote><p>注意:创建新分支的时候, 要先切换到master主分支上.</p></blockquote><h3 id="_3-7-分支合并" tabindex="-1">3.7 分支合并 <a class="header-anchor" href="#_3-7-分支合并" aria-label="Permalink to &quot;3.7 分支合并&quot;">​</a></h3><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 <code>master</code> 主分支上：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 切换到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 在master 分支上运行 git merge 命令，将 login 分支的代码合班到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><p><img src="`+V+`" alt="image-20220822044908375"></p><p><strong>合并分支时的注意点</strong>：</p><p>假设要把 login 分支的代码合并到 test 分支，</p><p>则必须<strong>先切换到 test 分支</strong>上，<strong>再运行 git merge 命令</strong>，来合并 login 分支！</p><h3 id="_3-8-删除分支" tabindex="-1">3.8 删除分支 <a class="header-anchor" href="#_3-8-删除分支" aria-label="Permalink to &quot;3.8 删除分支&quot;">​</a></h3><p>当把功能分支的代码合并到 <code>master</code> 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意要删除某个分支时, 不能在那个分支上面</span></span></code></pre></div><p><img src="`+j+`" alt="image-20220822045334499"></p><h3 id="_3-9-合并冲突" tabindex="-1">3.9 合并冲突 <a class="header-anchor" href="#_3-9-合并冲突" aria-label="Permalink to &quot;3.9 合并冲突&quot;">​</a></h3><p>如果<strong>在两个不同的分支中</strong>，对<strong>同一个文件</strong>进行了<strong>不同的修改</strong>，Git 就没法干净的合并它们。 此时，我们需要打开</p><p>这些包含冲突的文件然后<strong>手动解决冲突</strong>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设：在把 reg 分支合并到 master 分支期间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打开包含冲突的文件，手动解决冲突之后，再执行如下命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;解决了分支合并冲突的问题&quot;</span></span></code></pre></div><p><img src="`+M+`" alt="image-20220824030128353"></p><blockquote><ol><li>采用当前更改 2. 采用传入更改 3. 保留双方更改 4. 比较变更</li></ol></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  HEAD </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的是当前分支上修改的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">========</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的是要merge过来的那个分支的修改内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tab</span></span></code></pre></div><h2 id="_4-远程分支remote" tabindex="-1">4. 远程分支remote <a class="header-anchor" href="#_4-远程分支remote" aria-label="Permalink to &quot;4. 远程分支remote&quot;">​</a></h2><h3 id="_4-1-将本地分支推送到远程仓库" tabindex="-1">4.1 将本地分支推送到远程仓库 <a class="header-anchor" href="#_4-1-将本地分支推送到远程仓库" aria-label="Permalink to &quot;4.1 将本地分支推送到远程仓库&quot;">​</a></h3><p>如果是<strong>第一次</strong>将本地分支推送到远程仓库，需要运行如下的命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程仓库的别名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 本地分支名称:远程分支名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 实际案例   :重命名    原来名字:新名字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> payment:pay</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> payment</span></span></code></pre></div><h3 id="_4-2-查看远程仓库所有分支列表" tabindex="-1">4.2 查看远程仓库所有分支列表 <a class="header-anchor" href="#_4-2-查看远程仓库所有分支列表" aria-label="Permalink to &quot;4.2 查看远程仓库所有分支列表&quot;">​</a></h3><p>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程仓库名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # origin是远程仓库的别名</span></span></code></pre></div><h3 id="_4-3-跟踪分支" tabindex="-1">4.3 跟踪分支 <a class="header-anchor" href="#_4-3-跟踪分支" aria-label="Permalink to &quot;4.3 跟踪分支&quot;">​</a></h3><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从远程仓库中, 把对应的远程分支下载到本地仓库, 保持本地分支和远程分支名称相同</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程分支名字</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pay</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果需要重命名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 本地分支名称</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程仓库名称/远程分支名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> payment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/pay</span></span></code></pre></div><h3 id="_4-4-拉取远程分支最新代码" tabindex="-1">4.4 拉取远程分支最新代码 <a class="header-anchor" href="#_4-4-拉取远程分支最新代码" aria-label="Permalink to &quot;4.4 拉取远程分支最新代码&quot;">​</a></h3><p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码一致</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div><h3 id="_4-5-删除远程分支" tabindex="-1">4.5 删除远程分支 <a class="header-anchor" href="#_4-5-删除远程分支" aria-label="Permalink to &quot;4.5 删除远程分支&quot;">​</a></h3><p>可以使用如下的命令，删除远程仓库中指定的分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除远程仓库中，指定名称的远程分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程仓库名称</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程分支名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pay</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PS.注意: 删除本地分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果代码没有合并到master, 会提示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支</span></span></code></pre></div><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><ul><li>能够掌握 <code>Git</code> 中基本命令的使用 <ul><li><code>git init</code></li><li><code>git add .</code></li><li><code>git commit –m &quot;提交消息&quot;</code></li><li><code>git status</code> 和 <code>git status -s</code></li></ul></li><li>能够使用 <code>Github</code> 创建和维护远程仓库 <ul><li>能够配置 <code>Github</code> 的 <code>SSH</code> 访问</li><li>能够将本地仓库上传到 <code>Github</code></li></ul></li><li>能够掌握 <code>Git</code> 分支的基本使用 <ul><li><code>git checkout -b 新分支名称</code></li><li><code>git push -u origin 新分支名称</code> 第一次上传</li><li><code>git checkout 分支名称</code></li><li><code>git branch</code> 查看当前分支</li></ul></li></ul><h2 id="_6-sourcetree" tabindex="-1">6. SourceTree <a class="header-anchor" href="#_6-sourcetree" aria-label="Permalink to &quot;6. SourceTree&quot;">​</a></h2>`,192),U=[N];function O(R,K,L,$,Q,Y){return a(),i("div",null,U)}const Z=s(I,[["render",O]]);export{X as __pageData,Z as default};
