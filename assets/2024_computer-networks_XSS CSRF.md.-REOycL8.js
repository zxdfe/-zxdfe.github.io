import{_ as i,c as s,o as a,a4 as t}from"./chunks/framework.C5O6QHj3.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/computer-networks/XSS CSRF.md","filePath":"2024/computer-networks/XSS CSRF.md"}'),l={name:"2024/computer-networks/XSS CSRF.md"},e=t(`<h2 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h2><p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击.</p><p>XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。</p><p>对输入保持不可信。</p><h3 id="xss分类" tabindex="-1">XSS分类 <a class="header-anchor" href="#xss分类" aria-label="Permalink to &quot;XSS分类&quot;">​</a></h3><ul><li><p>存储型 (持久型)</p><ul><li>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行</li><li>blog,论坛易受此类攻击</li></ul></li><li><p>反射型 (非持久型)</p><ul><li>恶意代码并不存储在服务器上,而是在客户端打开网页时暂时存在.</li><li>动态网页和邮件应用尤其容易受到此类攻击</li></ul></li><li><p>基于DOM型(本地XSS)</p><ul><li>在这种情况下，web 服务器不参与, 破坏是由客户端的脚本引起的.</li></ul></li><li><p><a href="https://secure.wphackedhelp.com/blog/wordpress-xss-attack/" target="_blank" rel="noreferrer">https://secure.wphackedhelp.com/blog/wordpress-xss-attack/</a></p></li></ul><h3 id="xss防御" tabindex="-1">XSS防御 <a class="header-anchor" href="#xss防御" aria-label="Permalink to &quot;XSS防御&quot;">​</a></h3><ul><li><p>对输入过滤(过滤script标签)检查 <strong>不要相信用户的任何输入。</strong></p></li><li><p>输出处理 （服务器的输出也可能会出现问题）</p><ul><li>改成纯前端渲染, 把代码和数据分隔开, 明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等. 纯前端渲染还需注意避免 DOM 型 XSS 漏洞（例如 onload 事件和 href 中的 javascript:xxx</li><li>对HTML转义</li><li>Vue/React 不使用v-html/dangerouslySetInnerHTML</li></ul></li><li><p>验证码：防止脚本冒充用户提交危险操作</p></li><li><p>HttpOnly防止窃取Cookie:</p><ul><li>禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。</li></ul></li><li><p>使用CSP（Content Security Policy）：</p><ul><li>内容安全策略，实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行。分两类</li><li>Content-Security-Policy</li><li>Content-Security-Policy-Report-Only</li><li>CSP可以在服务端的配置响应头HTTP Header，（Apache，Nginx）配置，也可以在HTML Meta标签配置；</li></ul></li><li><p><a href="https://juejin.cn/post/6844903685122703367#heading-18" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903685122703367#heading-18</a></p></li></ul><h2 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h2><p>Cross-site request forgery 跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求. 利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><p>一个典型的CSRF攻击有着如下的流程：</p><ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li><strong>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会携带a.com的cookie</strong></li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li></ul><hr><p>cookie一般用于保存信息，你向同一个服务器发请求时会带上浏览器保存的对于那个服务器的cookie，而不管你从哪个网站发请求</p><p>ps. http请求都会带着请求目标域下的cookie的。只要你向A网站发了请求，就会带上A网站的cookie。所以重要操作的请求，认证信息都是不能存放在cookie中的。</p><p>Cookie 是紧跟域名的。同一个域名下的所有请求，都会携带 Cookie</p><p>攻击者借助受害者的 Cookie 骗取服务器的信任，但并不能拿到 Cookie，也看不到 Cookie 的内容</p><p><a href="https://github.com/dwqs/blog/issues/68" target="_blank" rel="noreferrer">https://github.com/dwqs/blog/issues/68</a></p><h3 id="常见的csrf攻击类型" tabindex="-1">常见的CSRF攻击类型 <a class="header-anchor" href="#常见的csrf攻击类型" aria-label="Permalink to &quot;常见的CSRF攻击类型&quot;">​</a></h3><ol><li><strong>GET类型的CSRF</strong></li></ol><p>GET类型的CSRF利用非常简单，只需要一个HTTP请求</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://bank.example/withdraw?amount=10000&amp;for=hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;</span></span></code></pre></div><p>在受害者访问含有这个img的页面后，浏览器会自动向<a href="http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker%E5%8F%91%E5%87%BA%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82%E3%80%82bank.example%E5%B0%B1%E4%BC%9A%E6%94%B6%E5%88%B0%E5%8C%85%E5%90%AB%E5%8F%97%E5%AE%B3%E8%80%85%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E3%80%82" target="_blank" rel="noreferrer">http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。</a></p><ol start="2"><li><strong>POST类型的CSRF</strong></li></ol><p>这种类型的CSRF利用起来通常使用的是一个自动提交的表单</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://bank.example/withdraw&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=POST&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    &lt;input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;account&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xiaoming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amount&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;for&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; document.forms[0].submit(); &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li><strong>链接类型的CSRF</strong></li></ol><p>链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发</p><h3 id="csrf防护" tabindex="-1">CSRF防护 <a class="header-anchor" href="#csrf防护" aria-label="Permalink to &quot;CSRF防护&quot;">​</a></h3><ol><li>验证Header中的Referer 确定来源域名 <ol><li>在CSP设置</li><li>页面头部增加meta标签</li><li>a标签增加referrerpolicy属性</li></ol></li><li>加入验证码</li><li>CSRF Token</li><li>加自定义Header (和token类似)</li><li>Chrome Cookie的Samesite属性设置 strict</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Samesite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Strict</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Samesite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lax</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div>`,31),h=[e];function n(p,k,r,o,d,g){return a(),s("div",null,h)}const F=i(l,[["render",n]]);export{c as __pageData,F as default};
