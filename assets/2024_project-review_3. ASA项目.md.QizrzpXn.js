import{_ as a,c as i,o as s,a4 as p}from"./chunks/framework.C5O6QHj3.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/project-review/3. ASA项目.md","filePath":"2024/project-review/3. ASA项目.md"}'),n={name:"2024/project-review/3. ASA项目.md"},t=p(`<blockquote><p>ASA 指的是 Apple Search Ads，即苹果搜索广告。苹果搜索广告是一种在 App Store 搜索结果中推广 app 的有效方式。 苹果官方的App广告投放方式</p></blockquote><p><strong>七麦的 AppSA 投放平台通过 ASA 官方数据接口，能确保广告数据准确、及时、稳定。配合中文本地化与多种工具，从而降低操作障碍与门槛，提升操作流畅度。</strong></p><h2 id="项目从0开始的基础搭建-构建工具的配置等。" tabindex="-1">项目从0开始的基础搭建，构建工具的配置等。 <a class="header-anchor" href="#项目从0开始的基础搭建-构建工具的配置等。" aria-label="Permalink to &quot;项目从0开始的基础搭建，构建工具的配置等。&quot;">​</a></h2><p>=&gt; Vue2.X + Vuex + Vue-Router + Webpack5</p><ol><li><strong>项目结构： 项目结构、组件的划分和目录的组织。</strong></li><li><strong>规范相关：参考Vue官方风格指南，代码规范</strong></li><li><strong>路由配置-状态管理-样式设置-版本控制等</strong></li><li><strong>构建和部署配置：webpack相关配置</strong></li><li><strong>前后端联调Mock的配置 =&gt; mock.js，写了一段koa服务，服务端导入mock.js，根据需要的格式，写接口。</strong></li><li><strong>基本的项目优化</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713176909261-b2f011fb-fe9e-4fab-80c5-f28c139b15f7.png#averageHue=%23b9bab7&amp;clientId=uea2c552e-47d8-4&amp;from=paste&amp;height=886&amp;id=u68000f08&amp;originHeight=1772&amp;originWidth=3314&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=568082&amp;status=done&amp;style=none&amp;taskId=u2bb267c3-b2d8-4924-aeed-7db272f6179&amp;title=&amp;width=1657" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713160015211-3cefc116-1b5c-45c8-b434-8b2f389cedc3.png#averageHue=%23d1a66f&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=834&amp;id=u469290aa&amp;originHeight=1668&amp;originWidth=3304&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=774077&amp;status=done&amp;style=none&amp;taskId=u06ee3d57-52e7-4515-8a01-444831b68cd&amp;title=&amp;width=1652" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713177201007-a9f3126e-593f-4a9a-b393-c153dd6932ed.png#averageHue=%23c0c0c0&amp;clientId=u9bb28a1d-8f2b-4&amp;from=paste&amp;height=731&amp;id=ub601291c&amp;originHeight=1462&amp;originWidth=448&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=117776&amp;status=done&amp;style=none&amp;taskId=ua92db0b0-b22a-464b-811d-f16e3ef0b8a&amp;title=&amp;width=224" alt="image.png"></p><blockquote><p>权限管理-</p></blockquote><ul><li>AppSA用户管理</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713159756068-d96e2ade-80fe-4064-9709-8fe71650d888.png#averageHue=%23e9e8e8&amp;clientId=u74923ecc-d5ed-4&amp;from=paste&amp;height=832&amp;id=u9f787729&amp;originHeight=1664&amp;originWidth=3234&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=788645&amp;status=done&amp;style=none&amp;taskId=u4315d5a8-2058-4e6b-830a-1608cf3e43e&amp;title=&amp;width=1617" alt="image.png"></p><h2 id="难点及优化点-4层树形结构的拆分。。" tabindex="-1">难点及优化点 ===&gt; 4层树形结构的拆分。。 <a class="header-anchor" href="#难点及优化点-4层树形结构的拆分。。" aria-label="Permalink to &quot;难点及优化点 ===&gt; 4层树形结构的拆分。。&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713161084214-5ce96d15-06a5-463a-aa38-d4bed7e995a0.png#averageHue=%23eb5241&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=692&amp;id=FpTGv&amp;originHeight=1384&amp;originWidth=2738&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=568875&amp;status=done&amp;style=none&amp;taskId=u0feb3e67-a47f-4bd4-b8f4-82729f57be6&amp;title=&amp;width=1369" alt="image.png"> 比如 给我们一个URL，我要直接展示每层的数据，</p><ul><li>背景是这个树是后端直接返回给前端的，需要前端自己查找渲染。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713168822467-8402b317-7c91-4fdd-a0dc-188c9ce45323.png#averageHue=%23d2d0cf&amp;clientId=uf920cb74-8d90-4&amp;from=paste&amp;height=384&amp;id=ub0d11b11&amp;originHeight=768&amp;originWidth=2134&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=193865&amp;status=done&amp;style=none&amp;taskId=ufa773d8a-f433-4e08-b54a-780f9a88287&amp;title=&amp;width=1067" alt="image.png"> 老项目的痛点：每次点击上面的栏目切换，页面卡顿，接口卡顿，反正就是各种卡。老板不满意，当然我也不满意。 分析老代码，比如，我们有<code>A_id =&gt; B_id =&gt; C_id =&gt;求C_ID下</code>的数据 。返回 =&gt; <code>[D_id1, D_id2, D_id3]</code> 假设每个节点下的数据量是<code>m</code> 我有A, B , C 三个 ID， 求 D 的数组。 这是在一棵树型结构上的操作。</p><h3 id="老的代码逻辑" tabindex="-1">老的代码逻辑 <a class="header-anchor" href="#老的代码逻辑" aria-label="Permalink to &quot;老的代码逻辑&quot;">​</a></h3><p>老代码做法就是按照<code>A -&gt; B -&gt; C </code>作为寻找路径，找到C节点下面对应的所有节点返回。 我们假设，平均每个节点下有 m 个子节点，那么采用深度优先搜索的算法策略，扩展搜索路径，具体操作如下：</p><ul><li>从 A 层开始，找出 ID 匹配的节点，将其设为当前的根节点。</li><li>接着在 B 层（即当前根节点的子节点）上搜索 ID，找到匹配的节点，将此节点作为新的根节点。</li><li>在 C 层（即当前根节点的子节点）上搜索 ID，找到匹配的节点，将此节点作为新的根节点。</li><li>最后，返回这个新的根节点（在 C 层）下的所有子节点的集合即可，这个集合即为 D 层的数据。</li></ul><p>这个操作的时间复杂度为 O(m^3)，因为需要在 A，B 和 C 层上进行遍历操作，并且对于每一层遍历，平均需要对 m 个节点进行检查。当然，每层的实际数据有些差异。</p><h2 id="" tabindex="-1"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713160706803-ea98d06e-c95f-40a8-a320-785e5ed11f86.png#averageHue=%23ccc5c5&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=405&amp;id=ubbdb5596&amp;originHeight=810&amp;originWidth=948&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=191631&amp;status=done&amp;style=none&amp;taskId=ud08e5e52-273b-4735-8028-564c4d85727&amp;title=&amp;width=474" alt="image.png"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![image.png](https://cdn.nlark.com/yuque/0/2024/png/302528/1713160706803-ea98d06e-c95f-40a8-a320-785e5ed11f86.png#averageHue=%23ccc5c5&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=405&amp;id=ubbdb5596&amp;originHeight=810&amp;originWidth=948&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=191631&amp;status=done&amp;style=none&amp;taskId=ud08e5e52-273b-4735-8028-564c4d85727&amp;title=&amp;width=474)&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713191013920-ed6d2397-7e96-4faa-912a-04f77ac8bc5e.png#averageHue=%23d5d5d5&amp;clientId=uc508f209-7f2f-4&amp;from=paste&amp;height=547&amp;id=uc1b16a85&amp;originHeight=1094&amp;originWidth=1260&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=467004&amp;status=done&amp;style=none&amp;taskId=u4e324bfc-95d6-4398-98a2-4dc26272f73&amp;title=&amp;width=630" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713162316071-11479817-c4f4-4912-a79e-9b91c0825a0f.png#averageHue=%23c89b7f&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=694&amp;id=ub6cea8a3&amp;originHeight=1388&amp;originWidth=2978&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=684985&amp;status=done&amp;style=none&amp;taskId=u4a7d96ec-c421-4291-9ad5-7e9b3f8dadd&amp;title=&amp;width=1489" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713163295827-4c3dfdf4-6356-496d-9731-f6da60e1e178.png#averageHue=%23e5e4e3&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=928&amp;id=ua2f1cc65&amp;originHeight=1856&amp;originWidth=2908&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=804275&amp;status=done&amp;style=none&amp;taskId=uf608c22b-3d70-41e0-97a4-9f7077d57a1&amp;title=&amp;width=1454" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713162861796-6a3ab6e2-fcb9-4551-a024-2f7dc61b4d95.png#averageHue=%23a1b259&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=674&amp;id=u4d26bf25&amp;originHeight=1348&amp;originWidth=3080&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=714337&amp;status=done&amp;style=none&amp;taskId=u70ad4c58-a9c1-4267-bfd6-5711ba2278a&amp;title=&amp;width=1540" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713162683292-dda7a979-c5eb-44b0-8e06-0dc263be8c84.png#averageHue=%23e0dede&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=626&amp;id=ud4690ab2&amp;originHeight=1252&amp;originWidth=2954&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=525804&amp;status=done&amp;style=none&amp;taskId=u8e7c5131-3435-4f97-82d6-2b95c8149bc&amp;title=&amp;width=1477" alt="image.png"></p><h3 id="优化思路" tabindex="-1">优化思路 <a class="header-anchor" href="#优化思路" aria-label="Permalink to &quot;优化思路&quot;">​</a></h3><blockquote><p>前后端一起修改数据结构，将<strong>树形改层扁平化</strong>数据。用空间换时间。当然，我们这么做了之后，前端原始的树形结构就丢失了，我还需要维护一个树形结构和扁平数据的映射关系。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713165774124-321ed736-97f5-44c1-912c-d5790668c21c.png#averageHue=%23e3e0e0&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=918&amp;id=u7efb074d&amp;originHeight=1836&amp;originWidth=2892&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=843742&amp;status=done&amp;style=none&amp;taskId=ub3bc899e-c9e2-4f44-af2b-2ac09e8ec0d&amp;title=&amp;width=1446" alt="image.png"></p><h4 id="通过a-id-b-id-c-id-查-d-group数据。" tabindex="-1">通过A_id，B_id，C_id 查 D_Group数据。 <a class="header-anchor" href="#通过a-id-b-id-c-id-查-d-group数据。" aria-label="Permalink to &quot;通过A_id，B_id，C_id 查 D_Group数据。&quot;">​</a></h4><blockquote><p>返回四个数组，每个节点一个数组。 A_Group， B_Group， C_Group，D_Group。</p></blockquote><p>当然，D_Group相当于是所有的数据都有。然后D中每个数据中，还包含了四个ID，它属于ABC中的哪一个以及自己的D_id.</p><blockquote><p>需求，我要查A_id, B_id, C_id下的所有D数据，首先，查D数据，在D_group中，遍历所有具有C_id的数据，返回。 时间复杂度<code>O(n)</code>, 我们直接将 <code>O(n^3)</code> =&gt; 优化到了 <code>O(n)</code></p></blockquote><h4 id="导航上还要回显示-a-id-b-id-c-id数据" tabindex="-1">导航上还要回显示 A_id, B_id, C_id数据 <a class="header-anchor" href="#导航上还要回显示-a-id-b-id-c-id数据" aria-label="Permalink to &quot;导航上还要回显示 A_id, B_id, C_id数据&quot;">​</a></h4><blockquote><p>维护三个数组, 因为每个tab中，还有筛选切换操作。</p></blockquote><ul><li>A_id下 =&gt; B_Group，</li><li>B_id下 =&gt; C_Group</li><li>C_id下 =&gt; D_Group</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713169975963-29479d69-117b-4561-85a1-6828eff7fb32.png#averageHue=%23e26749&amp;clientId=uf920cb74-8d90-4&amp;from=paste&amp;height=482&amp;id=u0c40b734&amp;originHeight=964&amp;originWidth=2042&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=291080&amp;status=done&amp;style=none&amp;taskId=u9fa35e88-4622-4247-be66-3719d19aff7&amp;title=&amp;width=1021" alt="image.png"></p><h4 id="进一步优化-过滤筛选数据-前端层面处理的-不需要对接后端接口。" tabindex="-1">进一步优化：过滤筛选数据，前端层面处理的，不需要对接后端接口。 <a class="header-anchor" href="#进一步优化-过滤筛选数据-前端层面处理的-不需要对接后端接口。" aria-label="Permalink to &quot;进一步优化：过滤筛选数据，前端层面处理的，不需要对接后端接口。&quot;">​</a></h4><p>把每组数据都存在了Vuex内存中了，既然前端已经有了数据，筛选也就很简单了。</p><h4 id="服务端优化" tabindex="-1">服务端优化 <a class="header-anchor" href="#服务端优化" aria-label="Permalink to &quot;服务端优化&quot;">​</a></h4><ul><li>对接口数据做了一层缓存。同样的参数，后端也会做一层缓存。下次请求更快。具体的实现逻辑在后端了</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713165945968-baf42927-b1ee-4661-86c8-a5cd33118eb5.png#averageHue=%23bdb896&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=815&amp;id=uffebaa02&amp;originHeight=1630&amp;originWidth=3062&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=788690&amp;status=done&amp;style=none&amp;taskId=udb486d0d-7f31-4dc3-bfab-86737382a6d&amp;title=&amp;width=1531" alt="image.png"></p><h4 id="还可以优化的点" tabindex="-1">还可以优化的点 <a class="header-anchor" href="#还可以优化的点" aria-label="Permalink to &quot;还可以优化的点&quot;">​</a></h4><blockquote><p>还能优化的点 。 做强缓存和协商缓存。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713166050585-b0c52c42-2612-4962-a6df-911e25987727.png#averageHue=%23e47356&amp;clientId=u5e17242e-e88d-4&amp;from=paste&amp;height=868&amp;id=ucd277e4f&amp;originHeight=1736&amp;originWidth=2888&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=675790&amp;status=done&amp;style=none&amp;taskId=u99ec3a06-6979-4203-b689-12ae2e19786&amp;title=&amp;width=1444" alt="image.png"></p><blockquote><p>四组数据，四个数组来存的。可以再改数据结构，比如哈希表</p></blockquote><p>=&gt; 假设原数据是这样子的</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;9&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;13&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;14&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;15&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>可以先把这颗树直接转为Map结构，key 为节点的 ID，value 为节点的数据（包含其子节点的 ID）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flattenMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node.id, node)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node.children) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.children) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      flattenMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flattenMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map)</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713170776690-2f2a9f8c-4589-4a42-9f59-122fbf6cf7f1.png#averageHue=%23e0dede&amp;clientId=uf920cb74-8d90-4&amp;from=paste&amp;height=832&amp;id=u4e0be0bb&amp;originHeight=1664&amp;originWidth=1160&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=235923&amp;status=done&amp;style=none&amp;taskId=u01c2fa0e-1f92-4c62-9730-51503725039&amp;title=&amp;width=580" alt="image.png"> 这样子的话，查找筛选的复杂度为<code>O(1)</code>,</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 找指定的节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 找指定节点的children</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id).children;</span></span></code></pre></div><ul><li>缺点：空间消耗稍微有点大了。。如果把一w个ID作为key，然后每个key的Value又是很庞大的数据，空间消耗就有点过分了。。看实际需求，需要权衡找到一个balance。</li></ul>`,47),e=[t];function l(h,k,d,r,o,E){return s(),i("div",null,e)}const c=a(n,[["render",l]]);export{g as __pageData,c as default};
