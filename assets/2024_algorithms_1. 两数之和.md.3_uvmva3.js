import{_ as a,c as i,o as s,a4 as t}from"./chunks/framework.Mj8dOX4M.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/algorithms/1. 两数之和.md","filePath":"2024/algorithms/1. 两数之和.md"}'),e={name:"2024/algorithms/1. 两数之和.md"},n=t(`<h2 id="leetcode" tabindex="-1">LeetCode <a class="header-anchor" href="#leetcode" aria-label="Permalink to &quot;LeetCode&quot;">​</a></h2><blockquote><p><a href="https://leetcode.cn/problems/two-sum/description/" target="_blank" rel="noreferrer">1. 两数之和</a></p></blockquote><blockquote><p>梦开始的地方 ~~~ 🤣</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713549912072-d73a16bf-cad9-48b3-a89c-bbe44f6ee506.png#averageHue=%23e0e0e0&amp;clientId=u7002af9f-8c19-4&amp;from=paste&amp;height=603&amp;id=ue97a30bc&amp;originHeight=1206&amp;originWidth=1664&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=182796&amp;status=done&amp;style=none&amp;taskId=u323095ca-fc7d-4714-8212-5328f79ff5d&amp;title=&amp;width=832" alt="image.png"></p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><blockquote><p><strong>什么时候使用哈希法</strong>，当我们需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。</p></blockquote><ul><li><strong>Key =&gt; 数组中的元素作为key，看元素是否出现过</strong></li><li><strong>Value =&gt; 存元素的下标</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713550600500-7dc815fc-48e8-40fe-8fbc-848d6bc76bfc.png#averageHue=%23dfdfdf&amp;clientId=u8ef572b3-9645-4&amp;from=paste&amp;height=488&amp;id=u9d164a31&amp;originHeight=976&amp;originWidth=1628&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=273751&amp;status=done&amp;style=none&amp;taskId=u45871949-bec5-4957-a1d2-366f33fb3a2&amp;title=&amp;width=814" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713550163147-6627818f-3acc-46cc-b462-467d5801961d.png#averageHue=%23bfbfbf&amp;clientId=u8ef572b3-9645-4&amp;from=paste&amp;height=261&amp;id=u9f85f941&amp;originHeight=522&amp;originWidth=1556&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=174871&amp;status=done&amp;style=none&amp;taskId=u8d336e00-b65d-4881-a5e8-5e66e7cd2e2&amp;title=&amp;width=778" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713600199441-ed702b26-fac8-4bfb-94ff-983a5210a1e4.png#averageHue=%23e0e0e0&amp;clientId=uf28de36b-3d78-4&amp;from=paste&amp;height=907&amp;id=u5447cf3d&amp;originHeight=1814&amp;originWidth=1432&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=322935&amp;status=done&amp;style=none&amp;taskId=u2a23deac-d6e1-4dc6-a109-0aa5361b8b0&amp;title=&amp;width=716" alt="image.png"></p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> twoSum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[i])) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [i, hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[i])];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums[i], i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h2><ul><li>为什么会想到用哈希表 (什么时候用hash，看元素是否出现，存在)</li><li>哈希表为什么用map （key -&gt; value ）</li><li>本题map是用来存什么的</li><li>map中的key和value用来存什么的</li></ul><p>把这四点想清楚了，本题才算是理解透彻了。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE" target="_blank" rel="noreferrer">代码随想录</a></li></ul>`,15),p=[n];function l(h,r,k,d,o,g){return s(),i("div",null,p)}const E=a(e,[["render",l]]);export{c as __pageData,E as default};
