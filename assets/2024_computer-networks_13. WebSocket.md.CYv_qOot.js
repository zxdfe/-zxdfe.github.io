import{_ as e,c as t,o,a4 as a}from"./chunks/framework.C5O6QHj3.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/computer-networks/13. WebSocket.md","filePath":"2024/computer-networks/13. WebSocket.md"}'),c={name:"2024/computer-networks/13. WebSocket.md"},i=a('<h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><blockquote><p><strong>websocket是H5引入的，基于TCP传输协议，并复用HTTP的握手通道，为浏览器和服务端提供全双工通讯的应用层协议。</strong></p></blockquote><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>支持双向通讯，实时性更强</li><li>更好的二进制支持</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>基于TCP传输协议，并复用HTTP的握手通道，服务端实现比较容易</li></ol><h2 id="http-与-websocket-的区别" tabindex="-1">HTTP 与 WebSocket 的区别 <a class="header-anchor" href="#http-与-websocket-的区别" aria-label="Permalink to &quot;HTTP 与 WebSocket 的区别&quot;">​</a></h2><h4 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h4><ul><li>都是一样基于TCP的应用层协议，都是可靠性传输协议</li></ul><h4 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h4><ul><li><code>WebSocket 是全双工通信协议</code>（其实物理链路层才用这个词），通信双方可以实时且同时发送和接收消息。而HTTP是单向的；</li><li><code>WebSocket 需要依赖 HTTP 协议进行一次握手升级</code>。握手成功过后数据就直接从 TCP 通道传输，与 HTTP 无关；</li><li>WebSocket 数据格式比较轻量，它的数据包头部较小，而HTTP协议每次通信都需要携带完整的头部</li><li><code>WebSocket 无跨域问题</code></li><li>WebSocket 没有了 Request 和 Response 的概念</li><li>应用场景不同，HTTP适用于简单场景，如网页浏览，表单提交等，<strong>WebSocket适用于需要持续连接，有频繁数据交换的场景</strong>，例如实时聊天、在线游戏、实时行情等。</li></ul><h2 id="websocket-握手协议-与-http握手-的区别" tabindex="-1">WebSocket 握手协议 与 Http握手 的区别 <a class="header-anchor" href="#websocket-握手协议-与-http握手-的区别" aria-label="Permalink to &quot;WebSocket 握手协议 与 Http握手 的区别&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/302528/1713235777508-1039319a-e212-4534-9ef6-706d9cec3456.png#averageHue=%23c8daa6&amp;clientId=uc4aeb73c-3040-4&amp;from=paste&amp;height=485&amp;id=ub6d62544&amp;originHeight=970&amp;originWidth=1440&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=311685&amp;status=done&amp;style=none&amp;taskId=ubb40cd55-32a2-4c56-a701-f96d6f6e548&amp;title=&amp;width=720" alt="image.png"> WebSocket 的握手协议相比 HTTP原本的握手协议 ，多了两个头部字段：</p><ul><li><code>Upgrade:webSocket</code></li><li><code>Connection:Upgrade</code></li><li>Sec-WebSocket-Key</li></ul><p>这两个字段告诉服务器这是一个要求升级到 WebSocket 的请求，另一个重要的头部字段是Sec-WebSocket-Key，这是一个 Base64 编码的随机值，用于之后的安全验证。</p><hr><p>如果服务器同意升级连接到 WebSocket，它会返回一个 <code>HTTP 101 Switching Protocols 的响应，表示协议正在被切换</code>。</p><p>在这个响应的头部信息中也会有一些特殊的字段。例如会有一个Sec-WebSocket-Accept，它是对客户端请求头中Sec-WebSocket-Key字段的一个回应，证明这个握手过程是双向认证的。</p><p>在 WebSocket 握手完成后，连接就转变为了一个全双工，持久的 WebSocket 连接，可以用于双向数据传输。</p><hr><blockquote><p>HTTP 握手和 WebSocket 握手最大的区别就是 <strong>WebSocket 握手包含了一次协议升级过程，握手完成后，连接由 HTTP 变成了 WebSocket，可以进行全双工的双向数据通信</strong>。</p></blockquote><h2 id="websocket的心跳检测" tabindex="-1">WebSocket的心跳检测 <a class="header-anchor" href="#websocket的心跳检测" aria-label="Permalink to &quot;WebSocket的心跳检测&quot;">​</a></h2><blockquote><p><code>WebSocket 的心跳检测就是客户端和服务器端定期发送一些小数据包来确认对方是否还在线，是一种检测连接状态的机制</code>。</p></blockquote><p>由于各种原因，WebSocket 连接可能会随时断开。但是只有当客户端尝试发送数据的时候，它才会意识到连接已经断开。为了避免这种情况，我们可以使用心跳检测来定期检查连接是否仍然正常。</p><p>通常，心跳检测是这样工作的：</p><ul><li>客户端每隔一段时间（比如 5 秒、30 秒或 1 分钟）发送一个 &quot;ping&quot; 消息到服务器，让服务端知道自己在线</li><li>当服务器收到 &quot;ping&quot; 消息后，返回一个 &quot;pong&quot; 消息作为响应，告诉客户端自己可用，否则视为断开，</li></ul><p>如果在一段时间内客户端没有收到 &quot;pong&quot; 消息，就知道连接可能已经断开，可以选择重连或者报错。</p><ul><li><code>客户端 ping </code> =&gt; 服务器</li><li><code>服务器 pong</code> =&gt; 客户端</li></ul><p>需要注意的是，心跳检测并不能避免连接断开，但是它可以帮助我们更快地检测到连接断开，并及时做出响应。这对于需要保持长连接的应用（比如在线聊天、游戏等）非常重要，可以提供更好的用户体验。</p><hr><ul><li><a href="https://juejin.cn/post/6844903544978407431?searchId=2024041609554492F3E2CEBA8209F60194#heading-19" target="_blank" rel="noreferrer">WebSocket：5分钟从入门到精通 - 掘金</a></li><li><a href="https://juejin.cn/post/6844903696560553991?searchId=2024041609554492F3E2CEBA8209F60194#heading-0" target="_blank" rel="noreferrer">WebSocket是时候展现你优秀的一面了 - 掘金</a></li></ul>',29),l=[i];function r(n,p,s,d,b,h){return o(),t("div",null,l)}const S=e(c,[["render",r]]);export{u as __pageData,S as default};
