import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.C5O6QHj3.js";const l="/assets/Untitled.B0FiTrG_.png",e="/assets/Untitled-1.C7D71HzP.png",F=JSON.parse('{"title":"day03","description":"","frontmatter":{},"headers":[],"relativePath":"HM-Course/05-Node/day03/day03.md","filePath":"HM-Course/05-Node/day03/day03.md"}'),t={name:"HM-Course/05-Node/day03/day03.md"},p=n(`<h1 id="day03" tabindex="-1">day03 <a class="header-anchor" href="#day03" aria-label="Permalink to &quot;day03&quot;">​</a></h1><h3 id="_1-先复习前天的内容" tabindex="-1">1. 先复习前天的内容 <a class="header-anchor" href="#_1-先复习前天的内容" aria-label="Permalink to &quot;1. 先复习前天的内容&quot;">​</a></h3><h3 id="_2-ipv4获取" tabindex="-1">2. IPV4获取 <a class="header-anchor" href="#_2-ipv4获取" aria-label="Permalink to &quot;2. IPV4获取&quot;">​</a></h3><h3 id="_3-需求-⇒-渲染新闻页面" tabindex="-1">3. 需求：⇒ 渲染新闻页面 <a class="header-anchor" href="#_3-需求-⇒-渲染新闻页面" aria-label="Permalink to &quot;3. 需求：⇒ 渲染新闻页面&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需求：当DOM加载完毕，就请求新闻列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fetch 或者axios  , 使用 async await处理数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOM加载完毕 =&gt; 事件？ </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 响应后的数据  =&gt;  const htmlArr = arr.map ==&gt; htmlArr.join(&#39;&#39;) =&gt; innerHTML</span></span></code></pre></div><h1 id="es6的模块化" tabindex="-1"><strong>ES6的模块化</strong> <a class="header-anchor" href="#es6的模块化" aria-label="Permalink to &quot;**ES6的模块化**&quot;">​</a></h1><h2 id="es6的模块化介绍及使用准备" tabindex="-1"><strong>ES6的模块化介绍及使用准备</strong> <a class="header-anchor" href="#es6的模块化介绍及使用准备" aria-label="Permalink to &quot;**ES6的模块化介绍及使用准备**&quot;">​</a></h2><blockquote><p>最新的官方的模块化标准，客户端和服务端都可以使用，之后咱们基本上模块化的语法用的都是这个</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer">传送门:mdn-import</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noreferrer">传送门:mdn-export</a></p></blockquote><h3 id="概念" tabindex="-1"><strong>概念:</strong> <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;**概念:**&quot;">​</a></h3><ul><li>在 <code>ES6</code> 模块化规范诞生之前，<code>JavaScript</code> 社区已经尝试并提出了<code>AMD</code>、<code>CMD</code>、<code>CommonJS</code> 等模块化规范。</li><li>这些由社区提出的模块化标准，还是存在一定的<strong>差异性与局限性</strong>--<strong>他不通用</strong><ul><li><code>AMD</code> 和 <code>CMD</code> 适用于<strong>浏览器端</strong>的 <code>Javascript</code> 模块化</li><li><code>CommonJS</code> 适用于<strong>服务器端</strong>的 <code>Javascript</code> 模块化</li></ul></li><li>过多的模块化规范给开发者增加了<strong>学习的难度与开发的成本</strong>。------因此，官方的<code>ES6</code> 模块化规范诞生了！</li><li>相信再<strong>不久的将来</strong>:前后端开发:都可以使用<code>ES6</code>的模块化，<strong>开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。</strong></li></ul><h3 id="语法" tabindex="-1"><strong>语法</strong> <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;**语法**&quot;">​</a></h3><ol><li><p>每个 <code>js</code> 文件都是一个独立的模块</p></li><li><p>导入其它模块成员使用 <code>import</code> 关键字</p></li><li><p>向外共享模块成员使用 <code>export</code> 关键字</p></li><li><p><code>Node.js</code>使用准备</p><ol><li><code>package.json</code>中的<code>type</code>属性改为<code>module</code></li><li>安装的<code>node</code>版本大于等于<code>13.0</code></li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;01.coding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;01.ES6的模块化.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Error: no test specified</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ISC&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="es6模块语法-默认的导出和导入" tabindex="-1"><strong>ES6模块语法-默认的导出和导入</strong> <a class="header-anchor" href="#es6模块语法-默认的导出和导入" aria-label="Permalink to &quot;**ES6模块语法-默认的导出和导入**&quot;">​</a></h2><blockquote><p>接下来咱们来学习ES6模块化中的默认导出和导入</p><p><a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noreferrer">传送门:ES6-module</a></p></blockquote><h3 id="语法-1" tabindex="-1"><strong>语法:</strong> <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;**语法:**&quot;">​</a></h3><ol><li>导出： <code>export default 默认导出的成员</code></li><li>导入： <code>import 接收名称 from &#39;模块&#39;</code></li></ol><h3 id="参考代码" tabindex="-1"><strong>参考代码:</strong> <a class="header-anchor" href="#参考代码" aria-label="Permalink to &quot;**参考代码:**&quot;">​</a></h3><ol><li>导出</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> food</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;青椒土豆丝&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dogs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;哈士奇&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;萨摩耶&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;王磊&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  friend: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;刘俊杰&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rose&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}你好呀！\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 暴露一个出去</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export default food</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 都暴露出去</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export default 只能写一次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  food,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dogs,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stu,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sayHi,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li>导入</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认导入时的接收名称可以任意名称，只要是合法的成员名称即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./xxx.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span></code></pre></div><h3 id="q1" tabindex="-1">Q1: <a class="header-anchor" href="#q1" aria-label="Permalink to &quot;Q1:&quot;">​</a></h3><p>咱们学习了ES模块语法的默认导出和导入:</p><ul><li><p><code>export default</code>可以写几次？</p><ol><li>一次</li></ol></li><li><p><code>export default</code>导出的模块外部如何导入?</p><ol><li><code>import 变量名 from &#39;地址.js&#39;</code></li></ol></li><li><p>使用ESM导入导出需要注意的点有哪些？</p><ol><li>package.json 中需要设置 <code>&quot;type&quot;:&quot;module&quot;</code></li><li>.js 不能省略</li><li>路径不能使用模板字符串</li></ol></li></ul><h2 id="es6模块化语法-按需导出和导入" tabindex="-1"><strong>ES6模块化语法 - 按需导出和导入</strong> <a class="header-anchor" href="#es6模块化语法-按需导出和导入" aria-label="Permalink to &quot;**ES6模块化语法 - 按需导出和导入**&quot;">​</a></h2><blockquote><p>接下来咱们来学习如何按需的导出和导入</p></blockquote><h3 id="语法-2" tabindex="-1"><strong>语法</strong> <a class="header-anchor" href="#语法-2" aria-label="Permalink to &quot;**语法**&quot;">​</a></h3><p><strong>导出</strong></p><ol><li><code>export const s1 = 10</code></li><li>或者<code>export {变量1,变量2,方法....}</code></li><li>可以和<code>export default</code>一起使用</li></ol><p><strong>导入:</strong></p><ol><li><code>import { 按需导入的名称 } from &#39;模块标识符&#39;</code></li><li>使用<code>as</code>起别名： <ol><li><code>import { 按需导出的名称 as 别名 } from &#39;./modules/02.按需导出.js&#39;</code></li></ol></li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { food } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./modules/02.按需导出.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;food:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, food)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入 + 起别名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { food </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fd } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./modules/02.按需导出.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fd:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fd)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入export default的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./modules/02.按需导出.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;result:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认导入可以和 按需导入一起使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result, { food } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./modules/02.按需导出.js&#39;</span></span></code></pre></div><h3 id="q2" tabindex="-1">Q2: <a class="header-anchor" href="#q2" aria-label="Permalink to &quot;Q2:&quot;">​</a></h3><ul><li><p>按需导出可以和默认导出一起使用吗？</p><p>可以</p></li><li><p>按需导出只能写一个，还是可以写多个</p><ol><li><strong>n个</strong></li></ol></li><li><p>按需导入起别名用什么关键字？</p><ol><li><code>as</code></li></ol></li><li><p>按需导出和默认导出的取舍? 什么时候使用？</p><ol><li>看<strong>需求</strong></li><li>只需要导出一个内容,可以<strong>默认</strong></li><li>有多个:<strong>按需</strong></li></ol></li></ul><h2 id="es6模块化语法-全部导入" tabindex="-1"><strong>ES6模块化语法 - 全部导入</strong> <a class="header-anchor" href="#es6模块化语法-全部导入" aria-label="Permalink to &quot;**ES6模块化语法 - 全部导入**&quot;">​</a></h2><blockquote><p>如果想要一次性导入所有的内容，还有一种语法哦,这个语法用的不多,了解即可</p></blockquote><h3 id="语法-3" tabindex="-1"><strong>语法：</strong> <a class="header-anchor" href="#语法-3" aria-label="Permalink to &quot;**语法：**&quot;">​</a></h3><ol><li><code>as</code> 是固定语法</li><li><code>myModule</code>是起的名字，可以根据需求调整</li><li>之后通过<code>myModule</code>点出需要的内容即可</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/modules/my-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="es6模块化语法-直接导入" tabindex="-1"><strong>ES6模块化语法 - 直接导入</strong> <a class="header-anchor" href="#es6模块化语法-直接导入" aria-label="Permalink to &quot;**ES6模块化语法 - 直接导入**&quot;">​</a></h2><blockquote><p>有时候我们只希望执行某个模块中的代码，并不需要得到模块中向外共享的成员，可以选择直接导入</p></blockquote><h3 id="语法-4" tabindex="-1"><strong>语法</strong> <a class="header-anchor" href="#语法-4" aria-label="Permalink to &quot;**语法**&quot;">​</a></h3><ol><li><p><code>import &#39;模块的路径&#39;</code></p><ol><li>模块的代码</li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件名 xxx.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>导入的语法</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxx.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 即可看到循环输出的内容</span></span></code></pre></div><p>这个语法并不能获取模块内的成员<code>import &#39;模块的路径&#39;</code>，作用是 ⇒ 执行 <strong>模块的代码</strong></p><h2 id="es6模块化语法-浏览器端使用" tabindex="-1"><strong>ES6模块化语法 - 浏览器端使用</strong> <a class="header-anchor" href="#es6模块化语法-浏览器端使用" aria-label="Permalink to &quot;**ES6模块化语法 - 浏览器端使用**&quot;">​</a></h2><blockquote><p>到目前为止测试的环境基本都是Node.js，但是作为前端开发者，咱们编写的代码大部分情况下运行的为止是浏览器，刚刚学习的ES6的模块化语法，在浏览器中可以使用吗？</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer">传送门：MDN-import</a></p></blockquote><h3 id="语法-5" tabindex="-1"><strong>语法：</strong> <a class="header-anchor" href="#语法-5" aria-label="Permalink to &quot;**语法：**&quot;">​</a></h3><ol><li><code>script</code>标签设置<code>type=module</code></li><li>内部写<code>ES6</code>的<code>import</code>语法即可</li><li>必须要通过服务器的方式 运行页面,直接通过浏览器打开(<strong>报错</strong>) <ol><li><code>serve</code>全局模块</li><li><strong>vscode</strong>的<code>live serve</code> 插件</li></ol></li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 默认导入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import myTool from &#39;./modules/myModule.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 上面学习的所有语法都可以使用哦</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong><strong>兼容性</strong></strong></p><p><a href="https://caniuse.com/?search=import" target="_blank" rel="noreferrer">&quot;import&quot; | Can I use... Support tables for HTML5, CSS3, etc</a></p><p><img src="`+l+`" alt="Untitled"></p><ul><li><code>新式浏览器</code>中是否可以直接使用ES6的模块化语法？ <ol><li>可以</li><li><code>type=module</code></li><li><strong>服务器</strong>的方式</li></ol></li></ul><h2 id="补充-yarn包管理器" tabindex="-1"><strong>补充 - yarn包管理器</strong> <a class="header-anchor" href="#补充-yarn包管理器" aria-label="Permalink to &quot;**补充 - yarn包管理器**&quot;">​</a></h2><blockquote><p>最后补充一个也蛮流行的包管理工具</p><p><a href="https://classic.yarnpkg.com/en/docs/install#windows-stable" target="_blank" rel="noreferrer">传送门:yarn</a></p><p><a href="https://blog.csdn.net/qq_64970126/article/details/125818888" target="_blank" rel="noreferrer">传送门:yarn全局安装配置</a></p></blockquote><h3 id="概念-1" tabindex="-1"><strong>概念:</strong> <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;**概念:**&quot;">​</a></h3><ol><li><code>npm</code>:官方的管理工具</li><li><code>yarn</code>:第三方的包管理工具--<strong>facebook</strong></li><li>比如: <ol><li><code>appstore</code>和第三方商店</li></ol></li></ol><p>快速、可靠、安全的依赖管理工具。和 npm 类似, 都是包管理工具, 可以用于下载包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dayjs</span></span></code></pre></div><p>下载地址: <a href="https://yarn.bootcss.com/docs/install/#windows-stable" target="_blank" rel="noreferrer">https://yarn.bootcss.com/docs/install/#windows-stable</a></p><p>windows本</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>mac本通过命令全局安装</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo npm i yarn -g</span></span></code></pre></div><p><strong>基本命令:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 初始化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [package]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [package]@[version]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 移除包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [package]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 安装项目全部依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 或者</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 全局</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  安装:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [package]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  卸载:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [package]</span></span></code></pre></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><ul><li><p>yarn和npm的使用取舍?</p><ol><li>公司主要使用的是哪个就用哪个</li><li>区别就是是否有 yarn.lock</li></ol></li><li><p><strong>使用注意:</strong></p><ol><li>一个项目中 不要</li><li><code>yarn</code>和<code>npm</code>混着用 <ol><li><code>axios,dayjs</code>用<code>npm</code>装</li><li><code>webpack</code>用<code>yarn</code>装</li></ol></li><li>npm---&gt;换成yarn <ol><li>删掉<code>node_module</code>,<code>package-lock.json</code></li><li>就可以放心大胆的使用<code>yarn</code></li></ol></li><li>yarn--&gt;npm <ol><li>删掉<code>node_module</code>,<code>yarn.lock</code></li><li>就可以放心大胆的使用<code>npm</code></li></ol></li></ol><p><a href="https://blog.csdn.net/u012384510/article/details/121200358" target="_blank" rel="noreferrer">npm、yarn、cnpm、pnpm 使用操作都在这了_若川视野的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/7127295203177676837#heading-2" target="_blank" rel="noreferrer">pnpm 是凭什么对 npm 和 yarn 降维打击的</a></p><p><a href="https://juejin.cn/post/7053340250210795557" target="_blank" rel="noreferrer">都2022年了，pnpm快到碗里来！</a></p><h1 id="koa2" tabindex="-1">Koa2 <a class="header-anchor" href="#koa2" aria-label="Permalink to &quot;Koa2&quot;">​</a></h1><p><a href="https://www.koajs.com.cn/" target="_blank" rel="noreferrer">Koa(koa.js)中文网 -- 基于 Node.js 平台的下一代 web 开发框架</a></p><p>koa 是由 <code>Express 原班人马</code>打造的，致力于成为一个更小、更富有表现力、更健壮的 <code>Web 框架</code>。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p><h3 id="koa-middleware洋葱模型" tabindex="-1">Koa-middleware洋葱模型 <a class="header-anchor" href="#koa-middleware洋葱模型" aria-label="Permalink to &quot;Koa-middleware洋葱模型&quot;">​</a></h3><p><a href="https://github.com/koajs/koa/blob/master/docs/guide.md#writing-middleware" target="_blank" rel="noreferrer">koa/guide.md at master · koajs/koa</a></p><p><img src="`+e+'" alt="Untitled"></p><p>⇒</p><p><a href="https://www.eggjs.org/intro/egg-and-koa" target="_blank" rel="noreferrer">Egg and Koa - Egg</a></p><p><a href="https://juejin.cn/post/6890259747866411022#heading-9" target="_blank" rel="noreferrer">如何更好地理解中间件和洋葱模型</a></p><p><a href="https://zhuanlan.zhihu.com/p/417163957" target="_blank" rel="noreferrer">【Node】深入浅出 Koa 的洋葱模型</a></p></li></ul></li></ol>',43),h=[p];function o(k,r,d,c,g,E){return a(),i("div",null,h)}const u=s(t,[["render",o]]);export{F as __pageData,u as default};
