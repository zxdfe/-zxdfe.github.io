import{_ as e,c as a,o as l,a4 as r}from"./chunks/framework.C5O6QHj3.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2024/computer-networks/5. 跨域解决方案.md","filePath":"2024/computer-networks/5. 跨域解决方案.md"}'),o={name:"2024/computer-networks/5. 跨域解决方案.md"},t=r('<h2 id="什么是同源策略" tabindex="-1">什么是同源策略 <a class="header-anchor" href="#什么是同源策略" aria-label="Permalink to &quot;什么是同源策略&quot;">​</a></h2><h3 id="同源" tabindex="-1">同源 <a class="header-anchor" href="#同源" aria-label="Permalink to &quot;同源&quot;">​</a></h3><p>如果两个 URL 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol" target="_blank" rel="noreferrer">protocol</a>、<a href="https://developer.mozilla.org/en-US/docs/Glossary/Port" target="_blank" rel="noreferrer">port (en-US)</a> (如果有指定的话)和 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Host" target="_blank" rel="noreferrer">host</a> 都相同的话，则这两个 URL 是<em>同源</em>。</p><p>==协议 、端口、域名==相同，则同源</p><h3 id="同源策略限制内容" tabindex="-1">同源策略限制内容 <a class="header-anchor" href="#同源策略限制内容" aria-label="Permalink to &quot;同源策略限制内容&quot;">​</a></h3><ul><li>Cookie、LocalStorage、IndexDB等存储内容</li><li>DOM 和 JS 对象无法获得</li><li>Ajax请求发送后，会被浏览器拦截</li></ul><h3 id="允许跨域的标签" tabindex="-1">允许跨域的标签 <a class="header-anchor" href="#允许跨域的标签" aria-label="Permalink to &quot;允许跨域的标签&quot;">​</a></h3><ul><li><p><code>&lt;script src=&quot;&quot;&gt;</code> 不存在跨域请求限制</p></li><li><p><code>&lt;img src=XXX&gt;</code></p></li><li><p><code>&lt;link href=XXX&gt;</code></p></li><li><p><code>&lt;iframe&gt;</code></p></li></ul><h3 id="阻止跨域访问" tabindex="-1">阻止跨域访问 <a class="header-anchor" href="#阻止跨域访问" aria-label="Permalink to &quot;阻止跨域访问&quot;">​</a></h3><ul><li>检测CSRF token</li></ul><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h2><ol><li>JSONP跨域解决方案底层原理</li><li>CORS跨域资源共享</li><li>基于http proxy实现跨域请求</li><li>基于post message</li><li>基于iframe实现跨域 <ul><li>window.name</li><li>location.hash</li><li>document.domain</li></ul></li><li>websocket 和 nginx反向代理</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ol><li><p><a href="https://juejin.cn/post/6844903767226351623" target="_blank" rel="noreferrer">九种跨域方式实现原理（完整版）</a></p></li><li><p><a href="https://juejin.cn/post/6844903495368179725" target="_blank" rel="noreferrer">前端常见跨域解决方案（全）</a></p></li></ol>',14),i=[t];function n(s,c,h,d,p,_){return l(),a("div",null,i)}const f=e(o,[["render",n]]);export{m as __pageData,f as default};
